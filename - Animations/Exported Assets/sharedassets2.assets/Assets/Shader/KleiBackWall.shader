Shader "Klei/BackWall" {
	Properties {
		atlas0 ("Atlas 0", 2D) = "green" {}
		atlas1 ("Atlas 1", 2D) = "green" {}
		atlas2 ("Atlas 2", 2D) = "green" {}
		atlas3 ("Atlas 3", 2D) = "green" {}
		atlas4 ("Atlas 4", 2D) = "green" {}
		atlas5 ("Atlas 5", 2D) = "green" {}
		atlas6 ("Atlas 6", 2D) = "green" {}
		atlas7 ("Atlas 7", 2D) = "green" {}
		atlas8 ("Atlas 8", 2D) = "green" {}
		atlas9 ("Atlas 9", 2D) = "green" {}
		atlas10 ("Atlas 10", 2D) = "green" {}
		atlas11 ("Atlas 11", 2D) = "green" {}
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
		Pass {
			Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
			Blend One OneMinusSrcAlpha, One OneMinusSrcAlpha
			Cull Off
			GpuProgramID 65109
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyzw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyzw
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xy
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r1.xyzw, r0.xyzw, cb1[3].xyzw
					mad r0.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
					mul r2.xyzw, r1.yyyy, cb2[18].xyzw
					mad r2.xyzw, cb2[17].xyzw, r1.xxxx, r2.xyzw
					mad r2.xyzw, cb2[19].xyzw, r1.zzzz, r2.xyzw
					mad o0.xyzw, cb2[20].xyzw, r1.wwww, r2.xyzw
					mov o1.xyz, r0.xyzx
					mul o2.xy, r0.xyxx, cb0[4].zwzz
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xy          2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[18], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_sampler s5, mode_default
					dcl_sampler s6, mode_default
					dcl_sampler s7, mode_default
					dcl_sampler s8, mode_default
					dcl_sampler s9, mode_default
					dcl_sampler s10, mode_default
					dcl_sampler s11, mode_default
					dcl_sampler s12, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_resource_texture2d (float,float,float,float) t6
					dcl_resource_texture2d (float,float,float,float) t7
					dcl_resource_texture2d (float,float,float,float) t8
					dcl_resource_texture2d (float,float,float,float) t9
					dcl_resource_texture2d (float,float,float,float) t10
					dcl_resource_texture2d (float,float,float,float) t11
					dcl_resource_texture2d (float,float,float,float) t12
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 9
					add r0.xyzw, v1.xyxy, l(-0.500000, -0.500000, 0.500000, 0.500000)
					mul r1.xyzw, r0.xyzw, cb0[4].zwzw
					sample r2.xyzw, r1.xyxx, t0.xyzw, s0
					sample r3.xyzw, r1.zyzz, t0.xyzw, s0
					sample r4.xyzw, r1.xwxx, t0.xyzw, s0
					sample r1.xyzw, r1.zwzz, t0.xyzw, s0
					mul r0.xy, v1.xyxx, cb0[17].zzzz
					mul r0.xy, r0.xyxx, l(0.050000, 0.050000, 0.000000, 0.000000)
					ne r1.x, r2.w, l(1.000000)
					lt r1.y, l(0.001961), r2.w
					if_nz r1.y
					  lt r1.y, r2.w, l(0.005882)
					  if_nz r1.y
					    sample r5.xyzw, r0.xyxx, t1.xyzw, s2
					  else 
					    lt r1.y, r2.w, l(0.009804)
					    if_nz r1.y
					      sample r5.xyzw, r0.xyxx, t2.xyzw, s3
					    else 
					      lt r1.y, r2.w, l(0.013725)
					      if_nz r1.y
					        sample r5.xyzw, r0.xyxx, t3.xyzw, s4
					      else 
					        lt r1.y, r2.w, l(0.017647)
					        if_nz r1.y
					          sample r5.xyzw, r0.xyxx, t4.xyzw, s5
					        else 
					          lt r1.y, r2.w, l(0.021569)
					          if_nz r1.y
					            sample r5.xyzw, r0.xyxx, t5.xyzw, s6
					          else 
					            lt r1.y, r2.w, l(0.025490)
					            if_nz r1.y
					              sample r5.xyzw, r0.xyxx, t6.xyzw, s7
					            else 
					              lt r1.y, r2.w, l(0.029412)
					              if_nz r1.y
					                sample r5.xyzw, r0.xyxx, t7.xyzw, s8
					              else 
					                lt r1.y, r2.w, l(0.033333)
					                if_nz r1.y
					                  sample r5.xyzw, r0.xyxx, t8.xyzw, s9
					                else 
					                  lt r1.y, r2.w, l(0.037255)
					                  if_nz r1.y
					                    sample r5.xyzw, r0.xyxx, t9.xyzw, s10
					                  else 
					                    lt r1.y, r2.w, l(0.041176)
					                    if_nz r1.y
					                      sample r5.xyzw, r0.xyxx, t10.xyzw, s11
					                    else 
					                      lt r1.y, r2.w, l(0.045098)
					                      if_nz r1.y
					                        sample r5.xyzw, r0.xyxx, t11.xyzw, s12
					                      else 
					                        mov r5.xyzw, l(1.000000,0,0,1.000000)
					                      endif 
					                    endif 
					                  endif 
					                endif 
					              endif 
					            endif 
					          endif 
					        endif 
					      endif 
					    endif 
					  endif 
					else 
					  sample r5.xyzw, r0.xyxx, t12.xyzw, s1
					endif 
					and r5.xyzw, r1.xxxx, r5.xyzw
					ne r1.x, r3.w, l(1.000000)
					lt r1.y, l(0.001961), r3.w
					if_nz r1.y
					  lt r1.y, r3.w, l(0.005882)
					  if_nz r1.y
					    sample r6.xyzw, r0.xyxx, t1.xyzw, s2
					  else 
					    lt r1.y, r3.w, l(0.009804)
					    if_nz r1.y
					      sample r6.xyzw, r0.xyxx, t2.xyzw, s3
					    else 
					      lt r1.y, r3.w, l(0.013725)
					      if_nz r1.y
					        sample r6.xyzw, r0.xyxx, t3.xyzw, s4
					      else 
					        lt r1.y, r3.w, l(0.017647)
					        if_nz r1.y
					          sample r6.xyzw, r0.xyxx, t4.xyzw, s5
					        else 
					          lt r1.y, r3.w, l(0.021569)
					          if_nz r1.y
					            sample r6.xyzw, r0.xyxx, t5.xyzw, s6
					          else 
					            lt r1.y, r3.w, l(0.025490)
					            if_nz r1.y
					              sample r6.xyzw, r0.xyxx, t6.xyzw, s7
					            else 
					              lt r1.y, r3.w, l(0.029412)
					              if_nz r1.y
					                sample r6.xyzw, r0.xyxx, t7.xyzw, s8
					              else 
					                lt r1.y, r3.w, l(0.033333)
					                if_nz r1.y
					                  sample r6.xyzw, r0.xyxx, t8.xyzw, s9
					                else 
					                  lt r1.y, r3.w, l(0.037255)
					                  if_nz r1.y
					                    sample r6.xyzw, r0.xyxx, t9.xyzw, s10
					                  else 
					                    lt r1.y, r3.w, l(0.041176)
					                    if_nz r1.y
					                      sample r6.xyzw, r0.xyxx, t10.xyzw, s11
					                    else 
					                      lt r1.y, r3.w, l(0.045098)
					                      if_nz r1.y
					                        sample r6.xyzw, r0.xyxx, t11.xyzw, s12
					                      else 
					                        mov r6.xyzw, l(1.000000,0,0,1.000000)
					                      endif 
					                    endif 
					                  endif 
					                endif 
					              endif 
					            endif 
					          endif 
					        endif 
					      endif 
					    endif 
					  endif 
					else 
					  sample r6.xyzw, r0.xyxx, t12.xyzw, s1
					endif 
					and r6.xyzw, r1.xxxx, r6.xyzw
					ne r1.x, r4.w, l(1.000000)
					lt r1.y, l(0.001961), r4.w
					if_nz r1.y
					  lt r1.y, r4.w, l(0.005882)
					  if_nz r1.y
					    sample r7.xyzw, r0.xyxx, t1.xyzw, s2
					  else 
					    lt r1.y, r4.w, l(0.009804)
					    if_nz r1.y
					      sample r7.xyzw, r0.xyxx, t2.xyzw, s3
					    else 
					      lt r1.y, r4.w, l(0.013725)
					      if_nz r1.y
					        sample r7.xyzw, r0.xyxx, t3.xyzw, s4
					      else 
					        lt r1.y, r4.w, l(0.017647)
					        if_nz r1.y
					          sample r7.xyzw, r0.xyxx, t4.xyzw, s5
					        else 
					          lt r1.y, r4.w, l(0.021569)
					          if_nz r1.y
					            sample r7.xyzw, r0.xyxx, t5.xyzw, s6
					          else 
					            lt r1.y, r4.w, l(0.025490)
					            if_nz r1.y
					              sample r7.xyzw, r0.xyxx, t6.xyzw, s7
					            else 
					              lt r1.y, r4.w, l(0.029412)
					              if_nz r1.y
					                sample r7.xyzw, r0.xyxx, t7.xyzw, s8
					              else 
					                lt r1.y, r4.w, l(0.033333)
					                if_nz r1.y
					                  sample r7.xyzw, r0.xyxx, t8.xyzw, s9
					                else 
					                  lt r1.y, r4.w, l(0.037255)
					                  if_nz r1.y
					                    sample r7.xyzw, r0.xyxx, t9.xyzw, s10
					                  else 
					                    lt r1.y, r4.w, l(0.041176)
					                    if_nz r1.y
					                      sample r7.xyzw, r0.xyxx, t10.xyzw, s11
					                    else 
					                      lt r1.y, r4.w, l(0.045098)
					                      if_nz r1.y
					                        sample r7.xyzw, r0.xyxx, t11.xyzw, s12
					                      else 
					                        mov r7.xyzw, l(1.000000,0,0,1.000000)
					                      endif 
					                    endif 
					                  endif 
					                endif 
					              endif 
					            endif 
					          endif 
					        endif 
					      endif 
					    endif 
					  endif 
					else 
					  sample r7.xyzw, r0.xyxx, t12.xyzw, s1
					endif 
					and r7.xyzw, r1.xxxx, r7.xyzw
					ne r1.x, r1.w, l(1.000000)
					lt r1.y, l(0.001961), r1.w
					if_nz r1.y
					  lt r1.y, r1.w, l(0.005882)
					  if_nz r1.y
					    sample r8.xyzw, r0.xyxx, t1.xyzw, s2
					  else 
					    lt r1.y, r1.w, l(0.009804)
					    if_nz r1.y
					      sample r8.xyzw, r0.xyxx, t2.xyzw, s3
					    else 
					      lt r1.y, r1.w, l(0.013725)
					      if_nz r1.y
					        sample r8.xyzw, r0.xyxx, t3.xyzw, s4
					      else 
					        lt r1.y, r1.w, l(0.017647)
					        if_nz r1.y
					          sample r8.xyzw, r0.xyxx, t4.xyzw, s5
					        else 
					          lt r1.y, r1.w, l(0.021569)
					          if_nz r1.y
					            sample r8.xyzw, r0.xyxx, t5.xyzw, s6
					          else 
					            lt r1.y, r1.w, l(0.025490)
					            if_nz r1.y
					              sample r8.xyzw, r0.xyxx, t6.xyzw, s7
					            else 
					              lt r1.y, r1.w, l(0.029412)
					              if_nz r1.y
					                sample r8.xyzw, r0.xyxx, t7.xyzw, s8
					              else 
					                lt r1.y, r1.w, l(0.033333)
					                if_nz r1.y
					                  sample r8.xyzw, r0.xyxx, t8.xyzw, s9
					                else 
					                  lt r1.y, r1.w, l(0.037255)
					                  if_nz r1.y
					                    sample r8.xyzw, r0.xyxx, t9.xyzw, s10
					                  else 
					                    lt r1.y, r1.w, l(0.041176)
					                    if_nz r1.y
					                      sample r8.xyzw, r0.xyxx, t10.xyzw, s11
					                    else 
					                      lt r1.y, r1.w, l(0.045098)
					                      if_nz r1.y
					                        sample r8.xyzw, r0.xyxx, t11.xyzw, s12
					                      else 
					                        mov r8.xyzw, l(1.000000,0,0,1.000000)
					                      endif 
					                    endif 
					                  endif 
					                endif 
					              endif 
					            endif 
					          endif 
					        endif 
					      endif 
					    endif 
					  endif 
					else 
					  sample r8.xyzw, r0.xyxx, t12.xyzw, s1
					endif 
					and r8.xyzw, r1.xxxx, r8.xyzw
					mul r5.xyz, r5.wwww, r5.xyzx
					mul r6.xyz, r6.wwww, r6.xyzx
					mul r7.xyz, r7.wwww, r7.xyzx
					mul r8.xyz, r8.wwww, r8.xyzx
					frc r0.xy, r0.zwzz
					add r6.xyzw, -r5.xyzw, r6.xyzw
					mad r5.xyzw, r0.xxxx, r6.xyzw, r5.xyzw
					add r6.xyzw, -r7.xyzw, r8.xyzw
					mad r6.xyzw, r0.xxxx, r6.xyzw, r7.xyzw
					add r6.xyzw, -r5.xyzw, r6.xyzw
					mad r0.xyzw, r0.yyyy, r6.xyzw, r5.xyzw
					eq r1.x, r2.w, l(1.000000)
					eq r1.y, r3.w, l(1.000000)
					or r1.x, r1.y, r1.x
					eq r1.y, r4.w, l(1.000000)
					or r1.x, r1.y, r1.x
					eq r1.y, r1.w, l(1.000000)
					or r1.x, r1.y, r1.x
					mul r1.y, r0.w, r0.w
					ge r1.y, l(0.500000), r1.y
					and r1.x, r1.y, r1.x
					discard_nz r1.x
					mov o0.xyzw, r0.xyzw
					mov o1.xyzw, l(0,0,0,1.000000)
					mov o2.xyzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}