Shader "Klei/ConduitBall" {
	Properties {
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Transparent+500" "RenderType" = "Transparent" }
		Pass {
			Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Transparent+500" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 49253
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// COLOR                    0   xyzw        2     NONE   float   xyzw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// COLOR                    0   xyzw        2     NONE   float   xyzw
					// TEXCOORD                 1   xy          3     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[15], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xyzw
					dcl_input v2.xyzw
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_output o3.xy
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					mul r0.x, v1.y, cb0[14].y
					mov o1.y, r0.x
					mad o1.x, v1.x, cb0[14].x, cb0[14].w
					mov o1.zw, v1.zzzw
					mov o2.xyzw, v2.xyzw
					mul o3.xy, v0.xyxx, cb0[6].zwzz
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// COLOR                    0   xyzw        2     NONE   float   xyzw
					// TEXCOORD                 1   xy          3     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[16], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xyzw
					dcl_input_ps linear v2.xyzw
					dcl_input_ps linear v3.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 5
					lt r0.x, l(0.000000), v1.z
					if_nz r0.x
					  sample r0.xyzw, v1.xyxx, t0.xyzw, s2
					  mov o0.w, r0.w
					else 
					  sample r0.xyzw, v1.xyxx, t1.xyzw, s1
					  mov o0.w, r0.w
					endif 
					lt r0.w, l(0.000000), cb0[14].z
					if_nz r0.w
					  eq r0.w, v2.w, l(0.000000)
					  add r1.xyz, r0.xyzx, v2.xyzx
					  movc o0.xyz, r0.wwww, r1.xyzx, v2.xyzx
					else 
					  eq r0.w, v2.w, l(0.000000)
					  add r1.xyz, r0.xyzx, v2.xyzx
					  mul r0.xyz, r0.xyzx, v2.xyzx
					  movc r0.xyz, r0.wwww, r1.xyzx, r0.xyzx
					  mul r0.xyz, r0.xyzx, r0.xyzx
					  mul r1.xy, v3.xyxx, cb0[6].xyxx
					  mul r2.xyzw, r1.yyyy, cb1[1].xyzw
					  mad r1.xyzw, cb1[0].xyzw, r1.xxxx, r2.xyzw
					  add r1.xyzw, r1.xyzw, cb1[3].xyzw
					  mul r2.xy, r1.yyyy, cb2[18].xyxx
					  mad r1.xy, cb2[17].xyxx, r1.xxxx, r2.xyxx
					  mad r1.xy, cb2[19].xyxx, r1.zzzz, r1.xyxx
					  mad r1.xy, cb2[20].xyxx, r1.wwww, r1.xyxx
					  mad r1.xy, r1.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  sample r1.xyzw, r1.xyxx, t2.xyzw, s0
					  dp3 r0.w, r1.xyzx, l(0.220000, 0.707000, 0.071000, 0.000000)
					  add r1.xyz, cb0[11].xyzx, -cb0[12].xyzx
					  mad r1.xyz, r0.wwww, r1.xyzx, cb0[12].xyzx
					  mul r0.xyz, r0.xyzx, r1.xyzx
					  sqrt r0.xyz, r0.xyzx
					  mul r1.xyz, v1.wwww, cb0[15].xyzx
					  mul r1.xyz, r1.xyzx, cb0[3].xxxx
					  mad r0.xyz, r1.xyzx, l(1.500000, 1.500000, 1.500000, 0.000000), r0.xyzx
					  add r0.w, -cb0[3].y, l(1.000000)
					  sample r1.xyzw, v3.xyxx, t3.xyzw, s3
					  min r1.w, r1.y, r1.x
					  min r1.w, r1.z, r1.w
					  max r2.x, r1.y, r1.x
					  max r2.x, r1.z, r2.x
					  add r2.y, -r1.w, r2.x
					  eq r2.z, r2.y, l(0.000000)
					  if_nz r2.z
					    mov r2.zw, l(0,0,0,0)
					  else 
					    add r3.x, r1.w, r2.x
					    lt r3.y, r3.x, l(1.000000)
					    div r3.x, r2.y, r3.x
					    add r1.w, -r1.w, -r2.x
					    add r1.w, r1.w, l(2.000000)
					    div r1.w, r2.y, r1.w
					    movc r2.w, r3.y, r3.x, r1.w
					    add r3.xyz, -r1.yzxy, r2.xxxx
					    mul r1.z, r2.y, l(0.500000)
					    mad r3.xyz, r3.xyzx, l(0.166667, 0.166667, 0.166667, 0.000000), r1.zzzz
					    div r3.xyz, r3.xyzx, r2.yyyy
					    add r1.z, -r3.x, r3.y
					    eq r1.xy, r1.xyxx, r2.xxxx
					    add r2.xy, r3.zxzz, l(0.333333, 0.666667, 0.000000, 0.000000)
					    add r2.xy, -r3.yzyy, r2.xyxx
					    movc r1.y, r1.y, r2.x, r2.y
					    movc r1.x, r1.x, r1.z, r1.y
					    lt r1.y, r1.x, l(0.000000)
					    lt r1.z, l(1.000000), r1.x
					    add r2.xy, r1.xxxx, l(1.000000, -1.000000, 0.000000, 0.000000)
					    movc r1.x, r1.z, r2.y, r1.x
					    movc r2.z, r1.y, r2.x, r1.x
					  endif 
					  min r1.x, r0.y, r0.x
					  min r1.x, r0.z, r1.x
					  max r1.y, r0.y, r0.x
					  max r1.y, r0.z, r1.y
					  add r1.x, r1.x, r1.y
					  mul r1.yzw, r1.xxxx, l(0.000000, 0.500000, 0.500000, 0.500000)
					  eq r2.x, r2.w, l(0.000000)
					  if_z r2.x
					    lt r2.x, r1.x, l(1.000000)
					    add r2.y, r2.w, l(1.000000)
					    mul r2.y, r1.w, r2.y
					    mad r3.x, r1.x, l(0.500000), r2.w
					    mad r2.w, -r2.w, r1.w, r3.x
					    movc r2.x, r2.x, r2.y, r2.w
					    add r1.x, r1.x, -r2.x
					    add r3.xyzw, r2.zzzz, l(0.333333, 1.333333, -0.666667, 1.000000)
					    lt r2.y, r3.x, l(0.000000)
					    lt r2.w, l(1.000000), r3.x
					    movc r2.w, r2.w, r3.z, r3.x
					    movc r2.y, r2.y, r3.y, r2.w
					    add r2.w, -r1.x, r2.x
					    mul r3.x, r2.w, l(6.000000)
					    mad r3.y, r3.x, r2.y, r1.x
					    lt r4.xyz, r2.yyyy, l(0.166667, 0.500000, 0.666667, 0.000000)
					    add r2.y, -r2.y, l(0.666667)
					    mul r2.y, r2.y, r2.w
					    mad r2.y, r2.y, l(6.000000), r1.x
					    movc r2.y, r4.z, r2.y, r1.x
					    movc r2.y, r4.y, r2.x, r2.y
					    movc r1.y, r4.x, r3.y, r2.y
					    lt r2.y, r2.z, l(0.000000)
					    lt r3.y, l(1.000000), r2.z
					    add r4.xyzw, r2.zzzz, l(-1.000000, -0.333333, 0.666667, -1.333333)
					    movc r2.z, r3.y, r4.x, r2.z
					    movc r2.y, r2.y, r3.w, r2.z
					    mad r2.z, r3.x, r2.y, r1.x
					    lt r3.yzw, r2.yyyy, l(0.000000, 0.166667, 0.500000, 0.666667)
					    add r2.y, -r2.y, l(0.666667)
					    mul r2.y, r2.y, r2.w
					    mad r2.y, r2.y, l(6.000000), r1.x
					    movc r2.y, r3.w, r2.y, r1.x
					    movc r2.y, r3.z, r2.x, r2.y
					    movc r1.z, r3.y, r2.z, r2.y
					    lt r2.y, r4.y, l(0.000000)
					    lt r2.z, l(1.000000), r4.y
					    movc r2.z, r2.z, r4.w, r4.y
					    movc r2.y, r2.y, r4.z, r2.z
					    mad r2.z, r3.x, r2.y, r1.x
					    lt r3.xyz, r2.yyyy, l(0.166667, 0.500000, 0.666667, 0.000000)
					    add r2.y, -r2.y, l(0.666667)
					    mul r2.y, r2.y, r2.w
					    mad r2.y, r2.y, l(6.000000), r1.x
					    movc r1.x, r3.z, r2.y, r1.x
					    movc r1.x, r3.y, r2.x, r1.x
					    movc r1.w, r3.x, r2.z, r1.x
					  endif 
					  mul r1.xyz, r1.yzwy, cb0[3].yyyy
					  mad o0.xyz, r0.xyzx, r0.wwww, r1.xyzx
					endif 
					mov o1.xyzw, l(0,0,0,0)
					mov o2.xyzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}