Shader "Klei/Biome/Unlit Transparent" {
	Properties {
		_MainTex ("Base (RGB) Trans (A)", 2D) = "white" {}
		_Color ("Color", Vector) = (1,1,1,1)
	}
	SubShader {
		LOD 100
		Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Transparent+500" "RenderType" = "Transparent" }
		Pass {
			LOD 100
			Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Transparent+500" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ZWrite Off
			GpuProgramID 56319
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// COLOR                    0   xyzw        2     NONE   float   xyzw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
					//
					vs_4_0
					dcl_constantbuffer CB0[12], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyzw
					dcl_input v1.xy
					dcl_input v2.xyzw
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyzw
					dcl_output o2.xyz
					dcl_output o3.xyzw
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r1.xyzw, r0.xyzw, cb1[3].xyzw
					mad r0.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
					mul r2.xyzw, r1.yyyy, cb2[18].xyzw
					mad r2.xyzw, cb2[17].xyzw, r1.xxxx, r2.xyzw
					mad r2.xyzw, cb2[19].xyzw, r1.zzzz, r2.xyzw
					mad o0.xyzw, cb2[20].xyzw, r1.wwww, r2.xyzw
					mul o1.zw, r0.xxxy, cb0[7].zzzw
					mov o2.xyz, r0.xyzx
					mov o1.xy, v1.xyxx
					mul o3.xyz, v2.xyzx, cb0[11].xyzx
					mov o3.w, v2.w
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[13], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xyzw
					dcl_input_ps linear v3.xyzw
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 6
					sample r0.xyzw, v1.xyxx, t0.xyzw, s1
					mul r0.xyzw, r0.xyzw, v3.xyzw
					mul r1.xyz, r0.xyzx, r0.xyzx
					mul r2.xy, v1.zwzz, cb0[7].xyxx
					mul r3.xyzw, r2.yyyy, cb1[1].xyzw
					mad r2.xyzw, cb1[0].xyzw, r2.xxxx, r3.xyzw
					add r2.xyzw, r2.xyzw, cb1[3].xyzw
					mul r3.xy, r2.yyyy, cb2[18].xyxx
					mad r2.xy, cb2[17].xyxx, r2.xxxx, r3.xyxx
					mad r2.xy, cb2[19].xyxx, r2.zzzz, r2.xyxx
					mad r2.xy, cb2[20].xyxx, r2.wwww, r2.xyxx
					mad r2.xy, r2.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					sample r2.xyzw, r2.xyxx, t1.xyzw, s0
					dp3 r1.w, r2.xyzx, l(0.220000, 0.707000, 0.071000, 0.000000)
					mul r1.xyz, r1.xyzx, cb0[12].xyzx
					mad r0.xyz, r0.xyzx, r0.xyzx, -r1.xyzx
					mad r0.xyz, r1.wwww, r0.xyzx, r1.xyzx
					sqrt r0.xyz, r0.xyzx
					add r1.x, -cb0[3].y, l(1.000000)
					sample r2.xyzw, v1.zwzz, t2.xyzw, s2
					min r1.y, r2.y, r2.x
					min r1.y, r2.z, r1.y
					max r1.z, r2.y, r2.x
					max r1.z, r2.z, r1.z
					add r1.w, -r1.y, r1.z
					eq r2.w, r1.w, l(0.000000)
					if_nz r2.w
					  mov r2.w, l(0)
					  mov r3.x, l(0)
					else 
					  add r3.y, r1.y, r1.z
					  lt r3.z, r3.y, l(1.000000)
					  div r3.y, r1.w, r3.y
					  add r1.y, -r1.z, -r1.y
					  add r1.y, r1.y, l(2.000000)
					  div r1.y, r1.w, r1.y
					  movc r3.x, r3.z, r3.y, r1.y
					  add r3.yzw, -r2.yyzx, r1.zzzz
					  mul r1.y, r1.w, l(0.500000)
					  mad r3.yzw, r3.yyzw, l(0.000000, 0.166667, 0.166667, 0.166667), r1.yyyy
					  div r3.yzw, r3.yyzw, r1.wwww
					  add r1.y, -r3.y, r3.z
					  eq r1.zw, r1.zzzz, r2.xxxy
					  add r2.xy, r3.wyww, l(0.333333, 0.666667, 0.000000, 0.000000)
					  add r2.xy, -r3.zwzz, r2.xyxx
					  movc r1.w, r1.w, r2.x, r2.y
					  movc r1.y, r1.z, r1.y, r1.w
					  lt r1.z, r1.y, l(0.000000)
					  lt r1.w, l(1.000000), r1.y
					  add r2.xy, r1.yyyy, l(1.000000, -1.000000, 0.000000, 0.000000)
					  movc r1.y, r1.w, r2.y, r1.y
					  movc r2.w, r1.z, r2.x, r1.y
					endif 
					min r1.y, r0.y, r0.x
					min r1.y, r0.z, r1.y
					max r1.z, r0.y, r0.x
					max r1.z, r0.z, r1.z
					add r1.y, r1.y, r1.z
					mul r2.xyz, r1.yyyy, l(0.500000, 0.500000, 0.500000, 0.000000)
					eq r1.z, r3.x, l(0.000000)
					if_z r1.z
					  lt r1.z, r1.y, l(1.000000)
					  add r1.w, r3.x, l(1.000000)
					  mul r1.w, r1.w, r2.z
					  mad r3.y, r1.y, l(0.500000), r3.x
					  mad r3.x, -r3.x, r2.z, r3.y
					  movc r1.z, r1.z, r1.w, r3.x
					  add r1.y, -r1.z, r1.y
					  add r3.xyzw, r2.wwww, l(0.333333, 1.333333, -0.666667, 1.000000)
					  lt r1.w, r3.x, l(0.000000)
					  lt r4.x, l(1.000000), r3.x
					  movc r3.x, r4.x, r3.z, r3.x
					  movc r1.w, r1.w, r3.y, r3.x
					  add r3.x, -r1.y, r1.z
					  mul r3.y, r3.x, l(6.000000)
					  mad r3.z, r3.y, r1.w, r1.y
					  lt r4.xyz, r1.wwww, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r1.w, -r1.w, l(0.666667)
					  mul r1.w, r1.w, r3.x
					  mad r1.w, r1.w, l(6.000000), r1.y
					  movc r1.w, r4.z, r1.w, r1.y
					  movc r1.w, r4.y, r1.z, r1.w
					  movc r2.x, r4.x, r3.z, r1.w
					  lt r1.w, r2.w, l(0.000000)
					  lt r3.z, l(1.000000), r2.w
					  add r4.xyzw, r2.wwww, l(-1.000000, -0.333333, 0.666667, -1.333333)
					  movc r2.w, r3.z, r4.x, r2.w
					  movc r1.w, r1.w, r3.w, r2.w
					  mad r2.w, r3.y, r1.w, r1.y
					  lt r5.xyz, r1.wwww, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r1.w, -r1.w, l(0.666667)
					  mul r1.w, r1.w, r3.x
					  mad r1.w, r1.w, l(6.000000), r1.y
					  movc r1.w, r5.z, r1.w, r1.y
					  movc r1.w, r5.y, r1.z, r1.w
					  movc r2.y, r5.x, r2.w, r1.w
					  lt r1.w, r4.y, l(0.000000)
					  lt r2.w, l(1.000000), r4.y
					  movc r2.w, r2.w, r4.w, r4.y
					  movc r1.w, r1.w, r4.z, r2.w
					  mad r2.w, r3.y, r1.w, r1.y
					  lt r3.yzw, r1.wwww, l(0.000000, 0.166667, 0.500000, 0.666667)
					  add r1.w, -r1.w, l(0.666667)
					  mul r1.w, r1.w, r3.x
					  mad r1.w, r1.w, l(6.000000), r1.y
					  movc r1.y, r3.w, r1.w, r1.y
					  movc r1.y, r3.z, r1.z, r1.y
					  movc r2.z, r3.y, r2.w, r1.y
					endif 
					mul r1.yzw, r2.xxyz, cb0[3].yyyy
					mad o0.xyz, r0.xyzx, r1.xxxx, r1.yzwy
					lt r0.x, l(0.750000), r0.w
					and o1.xyzw, r0.xxxx, l(0, 0, 0, 0x3f800000)
					mov o0.w, r0.w
					mov o2.xyzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}