Shader "Klei/LiquidSubstance" {
	Properties {
		_MainTex ("Base ColourMap", 2D) = "white" {}
		_WorldUVScale ("World UV Scale", Range(0, 100)) = 5
		_SrcAlpha ("SrcAlpha", Float) = 0
		_DestAlpha ("DstAlpha", Float) = 0
		_ZWrite ("ZWrite", Float) = 0
		_Colour ("Colour", Vector) = (1,1,1,0.5)
	}
	SubShader {
		Pass {
			Blend Zero Zero, Zero Zero
			ZWrite Off
			Cull Off
			Stencil {
				Ref 1
				Comp Equal
				Pass Keep
				Fail Keep
				ZFail Keep
			}
			GpuProgramID 10687
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "OPAQUE" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[9], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyzw
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyzw
					dcl_output o2.xy
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r1.xyzw, r0.xyzw, cb1[3].xyzw
					mad r0.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
					mul r2.xyzw, r1.yyyy, cb2[18].xyzw
					mad r2.xyzw, cb2[17].xyzw, r1.xxxx, r2.xyzw
					mad r2.xyzw, cb2[19].xyzw, r1.zzzz, r2.xyzw
					mad o0.xyzw, cb2[20].xyzw, r1.wwww, r2.xyzw
					div o1.xy, r0.xyxx, cb0[8].yyyy
					mov o1.zw, v1.xxxy
					mul o2.xy, r0.xyxx, cb0[4].zwzz
					mov o3.xyz, r0.xyzx
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ALPHA" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[9], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyzw
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyzw
					dcl_output o2.xy
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r1.xyzw, r0.xyzw, cb1[3].xyzw
					mad r0.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
					mul r2.xyzw, r1.yyyy, cb2[18].xyzw
					mad r2.xyzw, cb2[17].xyzw, r1.xxxx, r2.xyzw
					mad r2.xyzw, cb2[19].xyzw, r1.zzzz, r2.xyzw
					mad o0.xyzw, cb2[20].xyzw, r1.wwww, r2.xyzw
					div o1.xy, r0.xyxx, cb0[8].yyyy
					mov o1.zw, v1.xxxy
					mul o2.xy, r0.xyxx, cb0[4].zwzz
					mov o3.xyz, r0.xyzx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "OPAQUE" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					// TEXCOORD                 2   xyz         3     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[11], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xyzw
					dcl_input_ps linear v2.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 5
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					sample r1.xyzw, v1.zwzz, t1.xyzw, s2
					mul r0.xyzw, r0.xyzw, r1.xyzw
					mul r0.xyz, r0.xyzx, cb0[10].xyzx
					sample r1.xyzw, v2.xyxx, t2.xyzw, s1
					min r1.w, r1.y, r1.x
					min r1.w, r1.z, r1.w
					max r2.x, r1.y, r1.x
					max r2.x, r1.z, r2.x
					add r2.y, -r1.w, r2.x
					eq r2.z, r2.y, l(0.000000)
					if_nz r2.z
					  mov r2.zw, l(0,0,0,0)
					else 
					  add r3.x, r1.w, r2.x
					  lt r3.y, r3.x, l(1.000000)
					  div r3.x, r2.y, r3.x
					  add r1.w, -r1.w, -r2.x
					  add r1.w, r1.w, l(2.000000)
					  div r1.w, r2.y, r1.w
					  movc r2.w, r3.y, r3.x, r1.w
					  add r3.xyz, -r1.yzxy, r2.xxxx
					  mul r1.z, r2.y, l(0.500000)
					  mad r3.xyz, r3.xyzx, l(0.166667, 0.166667, 0.166667, 0.000000), r1.zzzz
					  div r3.xyz, r3.xyzx, r2.yyyy
					  add r1.z, -r3.x, r3.y
					  eq r1.xy, r1.xyxx, r2.xxxx
					  add r2.xy, r3.zxzz, l(0.333333, 0.666667, 0.000000, 0.000000)
					  add r2.xy, -r3.yzyy, r2.xyxx
					  movc r1.y, r1.y, r2.x, r2.y
					  movc r1.x, r1.x, r1.z, r1.y
					  lt r1.y, r1.x, l(0.000000)
					  lt r1.z, l(1.000000), r1.x
					  add r2.xy, r1.xxxx, l(1.000000, -1.000000, 0.000000, 0.000000)
					  movc r1.x, r1.z, r2.y, r1.x
					  movc r2.z, r1.y, r2.x, r1.x
					endif 
					min r1.x, r0.y, r0.x
					min r1.x, r0.z, r1.x
					max r1.y, r0.y, r0.x
					max r1.y, r0.z, r1.y
					add r1.x, r1.x, r1.y
					mul r1.yzw, r1.xxxx, l(0.000000, 0.500000, 0.500000, 0.500000)
					eq r2.x, r2.w, l(0.000000)
					if_z r2.x
					  lt r2.x, r1.x, l(1.000000)
					  add r2.y, r2.w, l(1.000000)
					  mul r2.y, r1.w, r2.y
					  mad r3.x, r1.x, l(0.500000), r2.w
					  mad r2.w, -r2.w, r1.w, r3.x
					  movc r2.x, r2.x, r2.y, r2.w
					  add r1.x, r1.x, -r2.x
					  add r3.xyzw, r2.zzzz, l(0.333333, 1.333333, -0.666667, 1.000000)
					  lt r2.y, r3.x, l(0.000000)
					  lt r2.w, l(1.000000), r3.x
					  movc r2.w, r2.w, r3.z, r3.x
					  movc r2.y, r2.y, r3.y, r2.w
					  add r2.w, -r1.x, r2.x
					  mul r3.x, r2.w, l(6.000000)
					  mad r3.y, r3.x, r2.y, r1.x
					  lt r4.xyz, r2.yyyy, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.y, -r2.y, l(0.666667)
					  mul r2.y, r2.y, r2.w
					  mad r2.y, r2.y, l(6.000000), r1.x
					  movc r2.y, r4.z, r2.y, r1.x
					  movc r2.y, r4.y, r2.x, r2.y
					  movc r1.y, r4.x, r3.y, r2.y
					  lt r2.y, r2.z, l(0.000000)
					  lt r3.y, l(1.000000), r2.z
					  add r4.xyzw, r2.zzzz, l(-1.000000, -0.333333, 0.666667, -1.333333)
					  movc r2.z, r3.y, r4.x, r2.z
					  movc r2.y, r2.y, r3.w, r2.z
					  mad r2.z, r3.x, r2.y, r1.x
					  lt r3.yzw, r2.yyyy, l(0.000000, 0.166667, 0.500000, 0.666667)
					  add r2.y, -r2.y, l(0.666667)
					  mul r2.y, r2.y, r2.w
					  mad r2.y, r2.y, l(6.000000), r1.x
					  movc r2.y, r3.w, r2.y, r1.x
					  movc r2.y, r3.z, r2.x, r2.y
					  movc r1.z, r3.y, r2.z, r2.y
					  lt r2.y, r4.y, l(0.000000)
					  lt r2.z, l(1.000000), r4.y
					  movc r2.z, r2.z, r4.w, r4.y
					  movc r2.y, r2.y, r4.z, r2.z
					  mad r2.z, r3.x, r2.y, r1.x
					  lt r3.xyz, r2.yyyy, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.y, -r2.y, l(0.666667)
					  mul r2.y, r2.y, r2.w
					  mad r2.y, r2.y, l(6.000000), r1.x
					  movc r1.x, r3.z, r2.y, r1.x
					  movc r1.x, r3.y, r2.x, r1.x
					  movc r1.w, r3.x, r2.z, r1.x
					endif 
					add r1.x, -cb0[8].z, l(1.000000)
					mul r0.xyz, r0.xyzx, r1.xxxx
					mad o0.xyz, r1.yzwy, cb0[8].zzzz, r0.xyzx
					mov o0.w, r0.w
					mov o1.xyz, l(0,0,0,0)
					mov o1.w, r0.w
					mov o2.xyzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ALPHA" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					// TEXCOORD                 2   xyz         3     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[11], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xyzw
					dcl_input_ps linear v2.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 5
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					sample r1.xyzw, v1.zwzz, t1.xyzw, s2
					mul r0.xyzw, r0.xyzw, r1.xyzw
					mul r0.xyz, r0.xyzx, cb0[10].xyzx
					sample r1.xyzw, v2.xyxx, t2.xyzw, s1
					min r1.w, r1.y, r1.x
					min r1.w, r1.z, r1.w
					max r2.x, r1.y, r1.x
					max r2.x, r1.z, r2.x
					add r2.y, -r1.w, r2.x
					eq r2.z, r2.y, l(0.000000)
					if_nz r2.z
					  mov r2.zw, l(0,0,0,0)
					else 
					  add r3.x, r1.w, r2.x
					  lt r3.y, r3.x, l(1.000000)
					  div r3.x, r2.y, r3.x
					  add r1.w, -r1.w, -r2.x
					  add r1.w, r1.w, l(2.000000)
					  div r1.w, r2.y, r1.w
					  movc r2.w, r3.y, r3.x, r1.w
					  add r3.xyz, -r1.yzxy, r2.xxxx
					  mul r1.z, r2.y, l(0.500000)
					  mad r3.xyz, r3.xyzx, l(0.166667, 0.166667, 0.166667, 0.000000), r1.zzzz
					  div r3.xyz, r3.xyzx, r2.yyyy
					  add r1.z, -r3.x, r3.y
					  eq r1.xy, r1.xyxx, r2.xxxx
					  add r2.xy, r3.zxzz, l(0.333333, 0.666667, 0.000000, 0.000000)
					  add r2.xy, -r3.yzyy, r2.xyxx
					  movc r1.y, r1.y, r2.x, r2.y
					  movc r1.x, r1.x, r1.z, r1.y
					  lt r1.y, r1.x, l(0.000000)
					  lt r1.z, l(1.000000), r1.x
					  add r2.xy, r1.xxxx, l(1.000000, -1.000000, 0.000000, 0.000000)
					  movc r1.x, r1.z, r2.y, r1.x
					  movc r2.z, r1.y, r2.x, r1.x
					endif 
					min r1.x, r0.y, r0.x
					min r1.x, r0.z, r1.x
					max r1.y, r0.y, r0.x
					max r1.y, r0.z, r1.y
					add r1.x, r1.x, r1.y
					mul r1.yzw, r1.xxxx, l(0.000000, 0.500000, 0.500000, 0.500000)
					eq r2.x, r2.w, l(0.000000)
					if_z r2.x
					  lt r2.x, r1.x, l(1.000000)
					  add r2.y, r2.w, l(1.000000)
					  mul r2.y, r1.w, r2.y
					  mad r3.x, r1.x, l(0.500000), r2.w
					  mad r2.w, -r2.w, r1.w, r3.x
					  movc r2.x, r2.x, r2.y, r2.w
					  add r1.x, r1.x, -r2.x
					  add r3.xyzw, r2.zzzz, l(0.333333, 1.333333, -0.666667, 1.000000)
					  lt r2.y, r3.x, l(0.000000)
					  lt r2.w, l(1.000000), r3.x
					  movc r2.w, r2.w, r3.z, r3.x
					  movc r2.y, r2.y, r3.y, r2.w
					  add r2.w, -r1.x, r2.x
					  mul r3.x, r2.w, l(6.000000)
					  mad r3.y, r3.x, r2.y, r1.x
					  lt r4.xyz, r2.yyyy, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.y, -r2.y, l(0.666667)
					  mul r2.y, r2.y, r2.w
					  mad r2.y, r2.y, l(6.000000), r1.x
					  movc r2.y, r4.z, r2.y, r1.x
					  movc r2.y, r4.y, r2.x, r2.y
					  movc r1.y, r4.x, r3.y, r2.y
					  lt r2.y, r2.z, l(0.000000)
					  lt r3.y, l(1.000000), r2.z
					  add r4.xyzw, r2.zzzz, l(-1.000000, -0.333333, 0.666667, -1.333333)
					  movc r2.z, r3.y, r4.x, r2.z
					  movc r2.y, r2.y, r3.w, r2.z
					  mad r2.z, r3.x, r2.y, r1.x
					  lt r3.yzw, r2.yyyy, l(0.000000, 0.166667, 0.500000, 0.666667)
					  add r2.y, -r2.y, l(0.666667)
					  mul r2.y, r2.y, r2.w
					  mad r2.y, r2.y, l(6.000000), r1.x
					  movc r2.y, r3.w, r2.y, r1.x
					  movc r2.y, r3.z, r2.x, r2.y
					  movc r1.z, r3.y, r2.z, r2.y
					  lt r2.y, r4.y, l(0.000000)
					  lt r2.z, l(1.000000), r4.y
					  movc r2.z, r2.z, r4.w, r4.y
					  movc r2.y, r2.y, r4.z, r2.z
					  mad r2.z, r3.x, r2.y, r1.x
					  lt r3.xyz, r2.yyyy, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.y, -r2.y, l(0.666667)
					  mul r2.y, r2.y, r2.w
					  mad r2.y, r2.y, l(6.000000), r1.x
					  movc r1.x, r3.z, r2.y, r1.x
					  movc r1.x, r3.y, r2.x, r1.x
					  movc r1.w, r3.x, r2.z, r1.x
					endif 
					add r1.x, -cb0[8].z, l(1.000000)
					mul r0.xyz, r0.xyzx, r1.xxxx
					mad o0.xyz, r1.yzwy, cb0[8].zzzz, r0.xyzx
					mov o0.w, r0.w
					mov o1.xyz, l(0,0,0,0)
					mov o1.w, r0.w
					mov o2.xyzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}