Shader "Klei/BatchedAnimationUI" {
	Properties {
		_StencilComp ("Stencil Comparison", Float) = 3
		_Stencil ("Stencil ID", Float) = 1
		_StencilOp ("Stencil Operation", Float) = 0
		_StencilWriteMask ("Stencil Write Mask", Float) = 0
		_StencilReadMask ("Stencil Read Mask", Float) = 1
		_ColorMask ("Color Mask", Float) = 15
		_Color ("Tint", Vector) = (1,1,1,1)
		[Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip ("Use Alpha Clip", Float) = 0
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask 0 -1
			ZWrite Off
			Cull Off
			Stencil {
				ReadMask 0
				WriteMask 0
				Comp Disabled
				Pass Keep
				Fail Keep
				ZFail Keep
			}
			GpuProgramID 39876
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float   x   
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
					// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
					// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
					// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
					// COLOR                    0   xyzw        8     NONE   float   xyzw
					//
					vs_4_0
					dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
					                              { 0, 1.000000, 0, 0},
					                              { 0, 0, 1.000000, 0},
					                              { 0, 0, 0, 1.000000} }
					dcl_constantbuffer CB0[16], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input v1.xy
					dcl_input v2.x
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyzw
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_output o4.xyzw
					dcl_output o5.xyzw
					dcl_output o6.xyzw
					dcl_output o7.xyzw
					dcl_output o8.xyzw
					dcl_temps 17
					ftoi r0.x, v1.x
					imul null, r0.y, r0.x, l(7)
					itof r0.y, r0.y
					mul r0.zw, cb0[12].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
					add r1.xy, r0.yyyy, l(0.500000, 2.500000, 0.000000, 0.000000)
					div r2.xyzw, r1.xxyy, cb0[12].zwzw
					round_ni r2.xyzw, r2.xzyw
					mad r1.xy, -cb0[12].zzzz, r2.xyxx, r1.xyxx
					round_ni r2.xy, r1.xyxx
					mad r1.xyzw, r2.xzyw, cb0[12].xyxy, r0.zwzw
					sample_l r2.xyzw, r1.xyxx, t0.xyzw, s1, l(0.000000)
					lt r1.x, l(0.000000), r2.z
					ftoi r2.yzw, r2.xxyw
					sample_l r3.xyzw, r1.zwzz, t0.xyzw, s1, l(0.000000)
					ieq r1.x, r1.x, l(-1)
					ieq r0.x, r0.x, r2.z
					and r0.x, r0.x, r1.x
					ige r1.x, r2.y, l(0)
					and r0.x, r0.x, r1.x
					ige r1.x, r2.y, r2.w
					and r0.x, r0.x, r1.x
					if_nz r0.x
					  ftoi r0.x, v1.y
					  round_z r1.x, r2.x
					  add r1.x, r1.x, l(1.000000)
					  mad r1.x, cb0[11].x, l(0.250000), r1.x
					  mul r1.yz, cb0[10].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					  add r1.x, r1.x, l(0.500000)
					  div r2.xz, r1.xxxx, cb0[10].zzwz
					  round_ni r4.yz, r2.xxzx
					  mad r1.x, -cb0[10].z, r4.y, r1.x
					  round_ni r4.x, r1.x
					  mad r1.xw, r4.xxxz, cb0[10].xxxy, r1.yyyz
					  sample_l r4.xyzw, r1.xwxx, t1.xyzw, s0, l(0.000000)
					  ftoi r1.xw, r4.yyyz
					  ilt r2.x, l(0), r1.x
					  ilt r1.x, r0.x, r1.x
					  and r1.x, r1.x, r2.x
					  ieq r1.w, r2.y, r1.w
					  and r1.x, r1.w, r1.x
					  if_nz r1.x
					    ftoi r1.x, r4.x
					    iadd r0.x, r0.x, r1.x
					    mad r1.x, cb0[11].x, l(0.250000), l(0.500000)
					    div r2.xy, r1.xxxx, cb0[10].zwzz
					    round_ni r2.yz, r2.xxyx
					    mad r1.x, -cb0[10].z, r2.y, r1.x
					    round_ni r2.x, r1.x
					    mad r1.xw, r2.xxxz, cb0[10].xxxy, r1.yyyz
					    sample_l r2.xyzw, r1.xwxx, t1.xyzw, s0, l(0.000000)
					    ftoi r1.x, r2.x
					    ishl r1.w, r0.x, l(2)
					    iadd r1.x, r1.w, r1.x
					    itof r1.x, r1.x
					    mad r1.x, cb0[11].x, l(0.250000), r1.x
					    add r1.w, r1.x, l(0.500000)
					    div r2.xy, r1.wwww, cb0[10].zwzz
					    round_ni r2.yz, r2.xxyx
					    mad r1.w, -cb0[10].z, r2.y, r1.w
					    round_ni r2.x, r1.w
					    mad r2.xy, r2.xzxx, cb0[10].xyxx, r1.yzyy
					    sample_l r2.xyzw, r2.xyxx, t1.xyzw, s0, l(0.000000)
					    ftoi r2.xy, r2.xyxx
					    ige r1.w, r2.x, l(0)
					    ieq r0.x, r0.x, r2.y
					    and r0.x, r0.x, r1.w
					    if_nz r0.x
					      ishl r0.x, r2.x, l(2)
					      itof r0.x, r0.x
					      add r2.yz, r0.xxxx, l(0.000000, 0.500000, 1.500000, 0.000000)
					      div r4.xyzw, r2.yyzz, cb0[10].zwzw
					      round_ni r4.xyzw, r4.xzyw
					      mad r2.yz, -cb0[10].zzzz, r4.xxyx, r2.yyzy
					      round_ni r4.xy, r2.yzyy
					      mad r4.xyzw, r4.xzyw, cb0[10].xyxy, r1.yzyz
					      sample_l r5.xyzw, r4.xyxx, t1.xyzw, s0, l(0.000000)
					      ftoi r2.yz, r5.xxyx
					      sample_l r4.xyzw, r4.zwzz, t1.xyzw, s0, l(0.000000)
					      add r1.w, r4.z, l(0.500000)
					      ftoi r1.w, r1.w
					      round_z r2.w, v1.x
					      ge r3.w, l(0.500000), cb0[15].z
					      if_nz r3.w
					        mov r5.xyzw, l(0,0,0,0)
					        mov r6.xyzw, l(0,0,0,0)
					        mov r7.xyzw, l(0,0,0,0)
					        mov r4.yzw, l(0,0,0,0)
					        mov r8.xyz, l(0,0,0,0)
					      endif 
					      if_z r3.w
					        imul null, r3.w, r2.x, l(3)
					        itof r3.w, r3.w
					        mul r8.w, r2.w, cb0[15].y
					        mad r3.w, r8.w, l(3.000000), r3.w
					        mul r9.xy, cb0[14].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					        add r10.xyz, r3.wwww, l(0.500000, 1.500000, 2.500000, 0.000000)
					        div r11.xyzw, r10.xxyy, cb0[14].zwzw
					        round_ni r11.xyzw, r11.xzyw
					        mad r9.zw, -cb0[14].zzzz, r11.xxxy, r10.xxxy
					        round_ni r11.xy, r9.zwzz
					        mad r11.xyzw, r11.xzyw, cb0[14].xyxy, r9.xyxy
					        sample_l r12.xyzw, r11.xyxx, t2.xyzw, s3, l(0.000000)
					        ftoi r4.w, r12.x
					        lt r8.z, l(0.000000), r12.y
					        sample_l r5.xyzw, r11.zwzz, t2.xyzw, s3, l(0.000000)
					        div r9.zw, r10.zzzz, cb0[14].zzzw
					        round_ni r11.yz, r9.zzwz
					        mad r3.w, -cb0[14].z, r11.y, r10.z
					        round_ni r11.x, r3.w
					        mad r9.xy, r11.xzxx, cb0[14].xyxx, r9.xyxx
					        sample_l r7.xyzw, r9.xyxx, t2.xyzw, s3, l(0.000000)
					        mov r4.yz, r5.zzyz
					        mov r6.xy, r5.xwxx
					        mov r6.zw, r7.zzzy
					        mov r8.xy, r7.xwxx
					      endif 
					      ishl r1.w, r1.w, l(1)
					      itof r1.w, r1.w
					      dp2 r2.w, cb0[15].xxxx, r2.wwww
					      add r1.w, r1.w, r2.w
					      round_z r2.w, r1.w
					      mul r9.xy, cb0[13].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					      add r2.w, r2.w, l(0.500000)
					      div r9.zw, r2.wwww, cb0[13].zzzw
					      round_ni r10.yz, r9.zzwz
					      mad r2.w, -cb0[13].z, r10.y, r2.w
					      round_ni r10.x, r2.w
					      mad r9.zw, r10.xxxz, cb0[13].xxxy, r9.xxxy
					      sample_l r10.xyzw, r9.zwzz, t3.xyzw, s2, l(0.000000)
					      lt r2.w, l(0.500000), r10.y
					      movc r2.y, r8.z, r4.w, r2.y
					      ige r3.w, r2.y, l(0)
					      and r2.w, r2.w, r3.w
					      ieq r2.x, r2.x, r2.z
					      and r2.x, r2.x, r2.w
					      if_nz r2.x
					        ftoi r1.w, r1.w
					        ftoi r2.x, v2.x
					        add r11.xyzw, r0.yyyy, l(1.500000, 3.500000, 4.500000, 5.500000)
					        div r12.xyzw, r11.xxyy, cb0[12].zwzw
					        round_ni r12.xyzw, r12.xzyw
					        mad r2.zw, -cb0[12].zzzz, r12.xxxy, r11.xxxy
					        round_ni r12.xy, r2.zwzz
					        mad r12.xyzw, r12.xzyw, cb0[12].xyxy, r0.zwzw
					        sample_l r13.xyzw, r12.xyxx, t0.wxyz, s1, l(0.000000)
					        sample_l o6.xyzw, r12.zwzz, t0.xyzw, s1, l(0.000000)
					        div r12.xyzw, r11.zzww, cb0[12].zwzw
					        round_ni r12.xyzw, r12.xzyw
					        mad r2.zw, -cb0[12].zzzz, r12.xxxy, r11.zzzw
					        round_ni r12.xy, r2.zwzz
					        mad r11.xyzw, r12.xzyw, cb0[12].xyxy, r0.zwzw
					        sample_l r12.xyzw, r11.xyxx, t0.xyzw, s1, l(0.000000)
					        sample_l o4.xyzw, r11.zwzz, t0.xyzw, s1, l(0.000000)
					        add r0.y, r0.y, l(6.500000)
					        div r2.zw, r0.yyyy, cb0[12].zzzw
					        round_ni r11.yz, r2.zzwz
					        mad r0.y, -cb0[12].z, r11.y, r0.y
					        round_ni r11.x, r0.y
					        mad r0.yz, r11.xxzx, cb0[12].xxyx, r0.zzwz
					        sample_l o7.xyzw, r0.yzyy, t0.xyzw, s1, l(0.000000)
					        add r0.yzw, r1.xxxx, l(0.000000, 1.500000, 2.500000, 3.500000)
					        div r11.xyzw, r0.yyzz, cb0[10].zwzw
					        round_ni r11.xyzw, r11.xzyw
					        mad r0.yz, -cb0[10].zzzz, r11.xxyx, r0.yyzy
					        round_ni r11.xy, r0.yzyy
					        mad r11.xyzw, r11.xzyw, cb0[10].xyxy, r1.yzyz
					        sample_l o8.xyzw, r11.xyxx, t1.xyzw, s0, l(0.000000)
					        sample_l r11.xyzw, r11.zwzz, t1.xyzw, s0, l(0.000000)
					        div r0.yz, r0.wwww, cb0[10].zzwz
					        round_ni r14.yz, r0.yyzy
					        mad r0.y, -cb0[10].z, r14.y, r0.w
					        round_ni r14.x, r0.y
					        mad r0.yz, r14.xxzx, cb0[10].xxyx, r1.yyzy
					        sample_l r14.xyzw, r0.yzyy, t1.xzyw, s0, l(0.000000)
					        iadd r0.y, r1.w, l(1)
					        itof r0.y, r0.y
					        add r0.y, r0.y, l(0.500000)
					        div r0.zw, r0.yyyy, cb0[13].zzzw
					        round_ni r15.yz, r0.zzwz
					        mad r0.y, -cb0[13].z, r15.y, r0.y
					        round_ni r15.x, r0.y
					        mad r0.yz, r15.xxzx, cb0[13].xxyx, r9.xxyx
					        sample_l r9.xyzw, r0.yzyy, t3.xyzw, s2, l(0.000000)
					        mov r15.xz, r11.xxyx
					        mov r15.yw, r14.xxxz
					        dp2 r16.x, r13.yzyy, r15.xyxx
					        dp2 r16.y, r13.yzyy, r15.zwzz
					        mov r14.x, r11.z
					        mov r14.z, l(1.000000)
					        dp3 r16.z, r13.yzwy, r14.xyzx
					        mov r13.yz, r3.xxyx
					        dp2 r11.x, r13.xyxx, r15.xyxx
					        dp2 r11.y, r13.xyxx, r15.zwzz
					        dp3 r11.z, r13.xyzx, r14.xyzx
					        mul o5.xyzw, r9.xyzw, r12.xyzw
					        if_nz r8.z
					          mul r0.yz, r5.xxyx, icb[r2.x + 0].xxxx
					          mad r0.yz, icb[r2.x + 0].yyyy, r4.yyzy, r0.yyzy
					          mad r0.yz, icb[r2.x + 0].zzzz, r6.xxyx, r0.yyzy
					          mad r0.yz, icb[r2.x + 0].wwww, r5.zzwz, r0.yyzy
					        else 
					          add r0.w, r0.x, l(2.500000)
					          div r1.xw, r0.wwww, cb0[10].zzzw
					          round_ni r5.yz, r1.xxwx
					          mad r0.w, -cb0[10].z, r5.y, r0.w
					          round_ni r5.x, r0.w
					          mad r1.xw, r5.xxxz, cb0[10].xxxy, r1.yyyz
					          sample_l r5.xyzw, r1.xwxx, t1.xyzw, s0, l(0.000000)
					          mul r9.xyzw, r5.xyzy, icb[r2.x + 0].xxyy
					          add r1.xw, r9.xxxy, r9.zzzw
					          mad r1.xw, icb[r2.x + 0].zzzz, r5.xxxw, r1.xxxw
					          mad r0.yz, icb[r2.x + 0].wwww, r5.zzwz, r1.xxwx
					        endif 
					        mul r5.xy, r10.zzzz, r0.yzyy
					        mov r5.z, l(1.000000)
					        dp3 r0.y, r16.xyzx, r5.xyzx
					        dp3 r0.z, r11.xyzx, r5.xyzx
					        mul r5.xyzw, r0.zzzz, cb1[1].xyzw
					        mad r5.xyzw, cb1[0].xyzw, r0.yyyy, r5.xyzw
					        add r5.xyzw, r5.xyzw, cb1[3].xyzw
					        mul r9.xyzw, r5.yyyy, cb2[18].xyzw
					        mad r9.xyzw, cb2[17].xyzw, r5.xxxx, r9.xyzw
					        mad r9.xyzw, cb2[19].xyzw, r5.zzzz, r9.xyzw
					        mad o0.xyzw, cb2[20].xyzw, r5.wwww, r9.xyzw
					        itof o1.z, r2.y
					        round_z o1.w, v2.x
					        if_nz r8.z
					          mul r0.yz, r7.xxyx, icb[r2.x + 0].xxxx
					          mad r0.yz, icb[r2.x + 0].yyyy, r6.zzwz, r0.yyzy
					          mad r0.yz, icb[r2.x + 0].zzzz, r8.xxyx, r0.yyzy
					          mad o1.xy, icb[r2.x + 0].wwww, r7.zwzz, r0.yzyy
					        else 
					          add r0.x, r0.x, l(3.500000)
					          div r0.yz, r0.xxxx, cb0[10].zzwz
					          round_ni r6.yz, r0.yyzy
					          mad r0.x, -cb0[10].z, r6.y, r0.x
					          round_ni r6.x, r0.x
					          mad r0.xy, r6.xzxx, cb0[10].xyxx, r1.yzyy
					          sample_l r0.xyzw, r0.xyxx, t1.xyzw, s0, l(0.000000)
					          mul r1.xyzw, r0.xyzy, icb[r2.x + 0].xxyy
					          add r1.xy, r1.xyxx, r1.zwzz
					          mad r0.xy, icb[r2.x + 0].zzzz, r0.xwxx, r1.xyxx
					          mad o1.xy, icb[r2.x + 0].wwww, r0.zwzz, r0.xyxx
					        endif 
					        mul r0.x, r4.x, l(0.500000)
					        ge r0.y, r0.x, -r0.x
					        frc r0.x, |r0.x|
					        movc r0.x, r0.y, r0.x, -r0.x
					        eq r0.x, r0.x, l(0.500000)
					        and r3.y, r0.x, l(0x3f800000)
					        mov o2.xyz, r5.xyzx
					        mov r3.x, l(0)
					      else 
					        mov o0.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					        mov o1.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					        mov o4.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					        mov o5.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					        mov o6.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					        mov o7.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					        mov o8.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					        mov o2.xyz, l(-99999.000000,-99999.000000,-99999.000000,0)
					        mov r3.xy, l(-99999.000000,-99999.000000,0,0)
					      endif 
					    else 
					      mov o0.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					      mov o1.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					      mov o4.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					      mov o5.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					      mov o6.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					      mov o7.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					      mov o8.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					      mov o2.xyz, l(-99999.000000,-99999.000000,-99999.000000,0)
					      mov r3.xy, l(-99999.000000,-99999.000000,0,0)
					    endif 
					  else 
					    mov o0.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					    mov o1.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					    mov o4.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					    mov o5.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					    mov o6.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					    mov o7.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					    mov o8.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					    mov o2.xyz, l(-99999.000000,-99999.000000,-99999.000000,0)
					    mov r3.xy, l(-99999.000000,-99999.000000,0,0)
					  endif 
					else 
					  mov o0.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					  mov o1.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					  mov o4.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					  mov o5.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					  mov o6.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					  mov o7.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					  mov o8.xyzw, l(-99999.000000,-99999.000000,-99999.000000,0)
					  mov o2.xyz, l(-99999.000000,-99999.000000,-99999.000000,0)
					  mov r3.xy, l(-99999.000000,-99999.000000,0,0)
					endif 
					mov o3.xyz, r3.xyzx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyzw        1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float    y  
					// TEXCOORD                 3   xyzw        4     NONE   float       
					// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
					// TEXCOORD                 5   xyzw        6     NONE   float       
					// TEXCOORD                 6   xyzw        7     NONE   float       
					// COLOR                    0   xyzw        8     NONE   float   xyzw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_sampler s5, mode_default
					dcl_sampler s6, mode_default
					dcl_sampler s7, mode_default
					dcl_sampler s8, mode_default
					dcl_sampler s9, mode_default
					dcl_sampler s10, mode_default
					dcl_sampler s11, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_resource_texture2d (float,float,float,float) t6
					dcl_resource_texture2d (float,float,float,float) t7
					dcl_resource_texture2d (float,float,float,float) t8
					dcl_resource_texture2d (float,float,float,float) t9
					dcl_resource_texture2d (float,float,float,float) t10
					dcl_resource_texture2d (float,float,float,float) t11
					dcl_input_ps linear v1.xyz
					dcl_input_ps linear v2.xyz
					dcl_input_ps linear v3.y
					dcl_input_ps linear v5.xyzw
					dcl_input_ps linear v8.xyzw
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 4
					lt r0.x, l(0.500000), v1.z
					if_nz r0.x
					  lt r0.x, v1.z, l(1.500000)
					  if_nz r0.x
					    sample r0.xyzw, v1.xyxx, t0.xyzw, s1
					  else 
					    lt r1.x, v1.z, l(2.500000)
					    if_nz r1.x
					      sample r0.xyzw, v1.xyxx, t1.xyzw, s2
					    else 
					      lt r1.x, v1.z, l(3.500000)
					      if_nz r1.x
					        sample r0.xyzw, v1.xyxx, t2.xyzw, s3
					      else 
					        lt r1.x, v1.z, l(4.500000)
					        if_nz r1.x
					          sample r0.xyzw, v1.xyxx, t3.xyzw, s4
					        else 
					          lt r1.x, v1.z, l(5.500000)
					          if_nz r1.x
					            sample r0.xyzw, v1.xyxx, t4.xyzw, s5
					          else 
					            lt r1.x, v1.z, l(6.500000)
					            if_nz r1.x
					              sample r0.xyzw, v1.xyxx, t5.xyzw, s6
					            else 
					              lt r1.x, v1.z, l(7.500000)
					              if_nz r1.x
					                sample r0.xyzw, v1.xyxx, t6.xyzw, s7
					              else 
					                lt r1.x, v1.z, l(8.500000)
					                if_nz r1.x
					                  sample r0.xyzw, v1.xyxx, t7.xyzw, s8
					                else 
					                  lt r1.x, v1.z, l(9.500000)
					                  if_nz r1.x
					                    sample r0.xyzw, v1.xyxx, t8.xyzw, s9
					                  else 
					                    lt r1.x, v1.z, l(10.500000)
					                    if_nz r1.x
					                      sample r0.xyzw, v1.xyxx, t9.xyzw, s10
					                    else 
					                      lt r1.x, v1.z, l(11.500000)
					                      if_nz r1.x
					                        sample r0.xyzw, v1.xyxx, t10.xyzw, s11
					                      else 
					                        mov r0.xyzw, l(1.000000,0,0,1.000000)
					                      endif 
					                    endif 
					                  endif 
					                endif 
					              endif 
					            endif 
					          endif 
					        endif 
					      endif 
					    endif 
					  endif 
					else 
					  sample r0.xyzw, v1.xyxx, t11.xyzw, s0
					endif 
					add r0.xyzw, r0.xyzw, cb0[21].xyzw
					eq r1.x, v8.w, l(0.000000)
					add r2.xyz, r0.xyzx, v8.xyzx
					mul r3.xyzw, r0.xyzw, v8.xyzw
					mov r2.w, r0.w
					movc r0.xyzw, r1.xxxx, r2.xyzw, r3.xyzw
					eq r1.x, v5.w, l(0.000000)
					add r2.xyz, r0.xyzx, v5.xyzx
					mul r3.xyzw, r0.xyzw, v5.xyzw
					mov r2.w, r0.w
					movc r0.xyzw, r1.xxxx, r2.xyzw, r3.xyzw
					ge r1.xy, v2.xyxx, cb0[20].xyxx
					ge r1.zw, cb0[20].zzzw, v2.xxxy
					and r1.xyzw, r1.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					mul r1.xy, r1.zwzz, r1.xyxx
					mul r1.x, r1.y, r1.x
					mul r1.y, r0.w, r1.x
					mad r0.w, r0.w, r1.x, l(-0.007000)
					lt r0.w, r0.w, l(0.000000)
					discard_nz r0.w
					mov o0.xyz, r0.xyzx
					mov o0.w, r1.y
					mov o1.x, v2.z
					mov o1.y, v3.y
					mov o1.zw, l(0,0,0,1.000000)
					mov o2.xyzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}