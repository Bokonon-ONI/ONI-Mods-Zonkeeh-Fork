Shader "Klei/PostFX/LightBufferCompositor" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_LightBufferTex ("Base (RGB)", 2D) = "white" {}
		_InvalidTex ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Pass {
			GpuProgramID 20406
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Position              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
					// TEXCOORD                 2   xy          3     NONE   float   xy  
					// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
					//
					vs_4_0
					dcl_constantbuffer CB0[27], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_output o3.xy
					dcl_output o4.xyzw
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad r0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					mov o0.xyzw, r0.xyzw
					mov o1.xy, v1.xyxx
					add r1.xy, -v1.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					mad r1.xy, r1.xyxx, cb0[7].zwzz, cb0[7].xyxx
					mov o1.zw, r1.xxxy
					mul r1.zw, r1.xxxy, cb0[6].xxxy
					mad r1.xy, r1.xyxx, cb0[6].xyxx, -cb1[4].xyxx
					mad r2.xyzw, r1.xyxy, cb0[26].xxyy, r1.zwzw
					mad r1.xy, r1.xyxx, cb0[26].zzzz, r1.zwzz
					mul r1.xy, r1.xyxx, cb0[6].zwzz
					mul r2.xyzw, r2.xyzw, cb0[6].zwzw
					mul r1.zw, cb0[6].xxxy, l(0.000000, 0.000000, 0.062500, 0.062500)
					mul o2.xyzw, r1.zwzw, r2.xyzw
					mul o3.xy, r1.zwzz, r1.xyxx
					mul r0.y, r0.y, cb1[5].x
					mul r0.xz, r0.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
					mul r0.w, r0.y, l(0.500000)
					add r0.xy, r0.zzzz, r0.xwxx
					mul r0.xy, r0.xyxx, cb1[6].zwzz
					div r0.w, cb1[6].y, cb1[6].x
					mul r0.z, r0.w, r0.y
					mul o4.zw, r0.xxxz, l(0.000000, 0.000000, 4.000000, 4.000000)
					mul o4.xy, cb0[6].zwzz, cb0[13].xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Position              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
					// TEXCOORD                 2   xy          3     NONE   float   xy  
					// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[25], immediateIndexed
					dcl_constantbuffer CB1[1], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_sampler s5, mode_default
					dcl_sampler s6, mode_default
					dcl_sampler s7, mode_default
					dcl_sampler s8, mode_default
					dcl_sampler s9, mode_default
					dcl_sampler s10, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_resource_texture2d (float,float,float,float) t6
					dcl_resource_texture2d (float,float,float,float) t7
					dcl_resource_texture2d (float,float,float,float) t8
					dcl_resource_texture2d (float,float,float,float) t9
					dcl_resource_texture2d (float,float,float,float) t10
					dcl_input_ps linear v1.xyzw
					dcl_input_ps linear v2.xyzw
					dcl_input_ps linear v3.xy
					dcl_input_ps linear v4.xyzw
					dcl_output o0.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s1
					sample r1.xyzw, v1.xyxx, t1.xyzw, s0
					mad r0.xyz, r1.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000), r0.xyzx
					mul r2.xy, cb0[6].xyxx, cb0[23].xxxx
					mul r2.xy, r2.xyxx, v1.zwzz
					mul r3.xyzw, r2.xyxy, l(0.003906, 0.003906, 0.002930, 0.002930)
					mul r4.xyz, cb0[23].yzwy, l(0.020000, 0.020000, 0.020000, 0.000000)
					sincos r5.x, r6.x, cb1[0].x
					add r6.x, r6.x, cb1[0].x
					mov r6.y, r5.x
					mad r2.zw, r4.xxxx, r6.xxxy, r3.xxxy
					sample r5.xyzw, r2.zwzz, t2.xyzw, s9
					add r2.zw, cb1[0].xxxx, l(0.000000, 0.000000, 67.000000, 113.000000)
					sincos r3.x, r4.x, r2.z
					add r5.x, r2.z, r4.x
					mov r5.y, r3.x
					mad r3.xy, r4.yyyy, r5.xyxx, r3.zwzz
					sample r3.xyzw, r3.xyxx, t2.xyzw, s9
					add r1.w, r3.w, r5.w
					sincos r3.x, r4.x, r2.w
					add r4.x, r2.w, r4.x
					mov r4.y, r3.x
					mul r2.zw, r4.xxxy, r4.zzzz
					mad r2.xy, r2.xyxx, l(0.001953, 0.001953, 0.000000, 0.000000), r2.zwzz
					sample r2.xyzw, r2.xyxx, t2.xyzw, s9
					add r1.w, r1.w, r2.w
					dp3 r1.x, r1.xyzx, l(0.220000, 0.707000, 0.071000, 0.000000)
					mul r1.y, r1.x, r1.x
					mul r1.x, r1.y, r1.x
					sample r2.xyzw, v1.zwzz, t3.xyzw, s3
					sample r3.xyzw, v1.zwzz, t4.xyzw, s4
					sample r4.xyzw, v1.zwzz, t5.xyzw, s2
					sample r5.xyzw, v1.zwzz, t6.xyzw, s10
					mad r1.y, r5.w, l(255.000000), l(-7.000000)
					min r1.y, |r1.y|, l(1.000000)
					mad r1.z, r1.y, l(-2.000000), l(3.000000)
					mul r1.xy, r1.xyxx, r1.wyww
					mul r1.y, r1.y, r1.z
					mul r1.yz, r1.yyyy, r4.xxyx
					lt r3.xy, l(0.000000, 0.000000, 0.000000, 0.000000), r1.yzyy
					if_nz r3.x
					  mad r4.xyzw, -cb0[18].xyzw, cb1[0].xxxx, v2.xyzw
					  sample r5.xyzw, r4.xyxx, t7.xyzw, s8
					  sample r4.xyzw, r4.zwzz, t7.xyzw, s8
					  mad r3.xz, -cb0[19].xxyx, cb1[0].xxxx, v3.xxyx
					  sample r6.xyzw, r3.xzxx, t8.xyzw, s7
					  mul r4.xyz, r4.wwww, cb0[11].xyzx
					  mad r4.xyz, cb0[12].xyzx, r5.wwww, r4.xyzx
					  mad r4.xyz, cb0[10].xyzx, r6.wwww, r4.xyzx
					  mul r4.xyz, r1.yyyy, r4.xyzx
					else 
					  mov r4.xyz, l(0,0,0,0)
					endif 
					if_nz r3.y
					  mad r5.xyzw, -cb0[20].xyzw, cb1[0].xxxx, v2.xyzw
					  sample r6.xyzw, r5.xyxx, t7.xyzw, s8
					  sample r5.xyzw, r5.zwzz, t7.xyzw, s8
					  mad r1.yw, -cb0[21].xxxy, cb1[0].xxxx, v3.xxxy
					  sample r7.xyzw, r1.ywyy, t9.xyzw, s6
					  mul r3.xyz, r5.wwww, cb0[15].xyzx
					  mad r3.xyz, cb0[16].xyzx, r6.wwww, r3.xyzx
					  mad r3.xyz, cb0[14].xyzx, r7.wwww, r3.xyzx
					  mad r4.xyz, r3.xyzx, r1.zzzz, r4.xyzx
					endif 
					mul r1.yzw, r3.wwww, r4.xxyz
					dp3_sat r2.x, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mul r1.yzw, r1.yyzw, cb0[24].wwww
					mul r3.xyz, r1.xxxx, cb0[22].xyzx
					mul r3.xyz, r3.xyzx, cb0[24].xxxx
					mul r2.yzw, r2.zzzz, r3.xxyz
					mad r1.xyz, r1.yzwy, r2.xxxx, r2.yzwy
					add r0.xyz, r0.xyzx, r1.xyzx
					add r1.xy, -v4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					min r2.x, r1.x, v4.x
					mad r1.x, -cb0[17].x, cb0[6].w, r1.y
					min r2.y, r1.x, v4.y
					mul r1.xy, r2.xyxx, l(128.000000, 128.000000, 0.000000, 0.000000)
					min r1.x, r1.y, r1.x
					add r1.x, -r1.x, l(1.000000)
					sample r2.xyzw, v4.zwzz, t10.xyzw, s5
					lt r1.yz, v1.zzwz, l(0.000000, 0.000000, 0.000000, 0.000000)
					lt r1.w, l(1.000000), v1.z
					or r1.y, r1.w, r1.y
					or r1.y, r1.z, r1.y
					mad r1.z, cb0[17].x, cb0[6].w, v1.w
					lt r1.z, l(1.000000), r1.z
					or r1.y, r1.z, r1.y
					mul_sat r1.x, r1.x, r2.w
					add r1.x, r0.x, r1.x
					movc o0.x, r1.y, r1.x, r0.x
					mov o0.yzw, r0.yyzw
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}