Shader "Klei/GasTest" {
	Properties {
		_GasDetailTex ("", 2D) = "white" {}
		_BadGasTex ("", 2D) = "white" {}
		_FGUVScaleOffset ("FG Detail UV Scale/Offset", Vector) = (0,0,0,0)
		_BGUVScaleOffset ("BG Detail UV Scale/Offset", Vector) = (0,0,0,0)
		_Alpha ("Alpha", Float) = 1
		_SpaceAlphaScale ("Space Alpha Scale", Float) = 1
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Geometry" "RenderType" = "Transparent" }
		Pass {
			Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Geometry" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ZWrite Off
			Cull Off
			GpuProgramID 23180
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[4], immediateIndexed
					dcl_constantbuffer CB1[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyzw
					dcl_output o2.xy
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb0[1].xyzw
					mad r0.xyzw, cb0[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb0[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb0[3].xyzw
					mul r1.xyzw, r0.yyyy, cb1[18].xyzw
					mad r1.xyzw, cb1[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb1[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb1[20].xyzw, r0.wwww, r1.xyzw
					mov o1.xyzw, v1.xyxy
					mov o2.xy, v0.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[19], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_sampler s5, mode_default
					dcl_sampler s6, mode_default
					dcl_sampler s7, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_resource_texture2d (float,float,float,float) t6
					dcl_resource_texture2d (float,float,float,float) t7
					dcl_input_ps linear v1.xyzw
					dcl_input_ps linear v2.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.zwzz, t0.xyzw, s6
					sample r1.xyzw, v1.zwzz, t1.wxyz, s1
					sample r2.xyzw, v1.zwzz, t2.xyzw, s0
					sqrt r1.y, r1.x
					add r1.z, -cb0[4].x, cb0[4].y
					mad r1.y, r1.y, r1.z, cb0[4].x
					add r1.zw, v1.xxxy, cb0[17].xxxy
					mul r1.zw, r1.zzzw, cb0[17].zzzw
					sample r3.xyzw, r1.zwzz, t3.xyzw, s2
					sample r4.xyzw, v1.zwzz, t4.xyzw, s4
					div r1.zw, v2.xxxy, cb0[2].xxxx
					add r1.zw, r3.xxxy, r1.zzzw
					sample r5.xyzw, r1.zwzz, t5.xyzw, s3
					div r3.xy, v2.xyxx, cb0[3].xxxx
					add r3.xy, r3.zwzz, r3.xyxx
					sample r6.xyzw, r3.xyxx, t5.xyzw, s3
					sample r7.xyzw, r1.zwzz, t6.xyzw, s5
					sample r3.xyzw, r3.xyxx, t6.xyzw, s5
					add r1.z, -r5.x, r7.w
					mad r1.z, r4.w, r1.z, r5.x
					add r1.w, -r6.x, r3.w
					mad r1.w, r4.w, r1.w, r6.x
					add r2.w, -cb0[1].x, l(0.500000)
					add r2.w, |r2.w|, |r2.w|
					add r1.w, -r1.z, r1.w
					mad r1.z, r2.w, r1.w, r1.z
					mul r1.z, r1.z, r1.z
					mul r1.y, r1.z, r1.y
					mov_sat r1.x, r1.x
					mul r1.z, r1.x, r1.y
					mul_sat r1.w, r1.z, cb0[5].x
					mad r1.x, -r1.y, r1.x, r1.w
					mad r0.w, r0.w, r1.x, r1.z
					mul o0.w, r0.w, cb0[5].y
					mul r1.xyz, r2.xyzx, r2.xyzx
					mul r3.xy, v1.zwzz, cb0[12].xyxx
					mul r4.xyzw, r3.yyyy, cb1[1].xyzw
					mad r3.xyzw, cb1[0].xyzw, r3.xxxx, r4.xyzw
					add r3.xyzw, r3.xyzw, cb1[3].xyzw
					mul r4.xy, r3.yyyy, cb2[18].xyxx
					mad r3.xy, cb2[17].xyxx, r3.xxxx, r4.xyxx
					mad r3.xy, cb2[19].xyxx, r3.zzzz, r3.xyxx
					mad r3.xy, cb2[20].xyxx, r3.wwww, r3.xyxx
					mad r3.xy, r3.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					sample r3.xyzw, r3.xyxx, t7.xyzw, s7
					dp3 r0.w, r3.xyzx, l(0.220000, 0.707000, 0.071000, 0.000000)
					mul r1.xyz, r1.xyzx, cb0[18].xyzx
					mad r2.xyz, r2.xyzx, r2.xyzx, -r1.xyzx
					mad r1.xyz, r0.wwww, r2.xyzx, r1.xyzx
					sqrt r1.xyz, r1.xyzx
					add r0.w, -cb0[0].x, l(1.000000)
					min r1.w, r0.y, r0.x
					min r1.w, r0.z, r1.w
					max r2.x, r0.y, r0.x
					max r2.x, r0.z, r2.x
					add r2.y, -r1.w, r2.x
					eq r2.z, r2.y, l(0.000000)
					if_nz r2.z
					  mov r2.zw, l(0,0,0,0)
					else 
					  add r3.x, r1.w, r2.x
					  lt r3.y, r3.x, l(1.000000)
					  div r3.x, r2.y, r3.x
					  add r1.w, -r1.w, -r2.x
					  add r1.w, r1.w, l(2.000000)
					  div r1.w, r2.y, r1.w
					  movc r2.w, r3.y, r3.x, r1.w
					  add r3.xyz, -r0.yzxy, r2.xxxx
					  mul r0.z, r2.y, l(0.500000)
					  mad r3.xyz, r3.xyzx, l(0.166667, 0.166667, 0.166667, 0.000000), r0.zzzz
					  div r3.xyz, r3.xyzx, r2.yyyy
					  add r0.z, -r3.x, r3.y
					  eq r0.xy, r0.xyxx, r2.xxxx
					  add r2.xy, r3.zxzz, l(0.333333, 0.666667, 0.000000, 0.000000)
					  add r2.xy, -r3.yzyy, r2.xyxx
					  movc r0.y, r0.y, r2.x, r2.y
					  movc r0.x, r0.x, r0.z, r0.y
					  lt r0.y, r0.x, l(0.000000)
					  lt r0.z, l(1.000000), r0.x
					  add r2.xy, r0.xxxx, l(1.000000, -1.000000, 0.000000, 0.000000)
					  movc r0.x, r0.z, r2.y, r0.x
					  movc r2.z, r0.y, r2.x, r0.x
					endif 
					min r0.x, r1.y, r1.x
					min r0.x, r1.z, r0.x
					max r0.y, r1.y, r1.x
					max r0.y, r1.z, r0.y
					add r0.x, r0.x, r0.y
					mul r3.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)
					eq r0.y, r2.w, l(0.000000)
					if_z r0.y
					  lt r0.y, r0.x, l(1.000000)
					  add r0.z, r2.w, l(1.000000)
					  mul r0.z, r0.z, r3.z
					  mad r1.w, r0.x, l(0.500000), r2.w
					  mad r1.w, -r2.w, r3.z, r1.w
					  movc r0.y, r0.y, r0.z, r1.w
					  add r0.x, -r0.y, r0.x
					  add r4.xyzw, r2.zzzz, l(0.333333, 1.333333, -0.666667, 1.000000)
					  lt r0.z, r4.x, l(0.000000)
					  lt r1.w, l(1.000000), r4.x
					  movc r1.w, r1.w, r4.z, r4.x
					  movc r0.z, r0.z, r4.y, r1.w
					  add r1.w, -r0.x, r0.y
					  mul r2.x, r1.w, l(6.000000)
					  mad r2.y, r2.x, r0.z, r0.x
					  lt r4.xyz, r0.zzzz, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r0.z, -r0.z, l(0.666667)
					  mul r0.z, r0.z, r1.w
					  mad r0.z, r0.z, l(6.000000), r0.x
					  movc r0.z, r4.z, r0.z, r0.x
					  movc r0.z, r4.y, r0.y, r0.z
					  movc r3.x, r4.x, r2.y, r0.z
					  lt r0.z, r2.z, l(0.000000)
					  lt r2.y, l(1.000000), r2.z
					  add r5.xyzw, r2.zzzz, l(-1.000000, -0.333333, 0.666667, -1.333333)
					  movc r2.y, r2.y, r5.x, r2.z
					  movc r0.z, r0.z, r4.w, r2.y
					  mad r2.y, r2.x, r0.z, r0.x
					  lt r4.xyz, r0.zzzz, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r0.z, -r0.z, l(0.666667)
					  mul r0.z, r0.z, r1.w
					  mad r0.z, r0.z, l(6.000000), r0.x
					  movc r0.z, r4.z, r0.z, r0.x
					  movc r0.z, r4.y, r0.y, r0.z
					  movc r3.y, r4.x, r2.y, r0.z
					  lt r0.z, r5.y, l(0.000000)
					  lt r2.y, l(1.000000), r5.y
					  movc r2.y, r2.y, r5.w, r5.y
					  movc r0.z, r0.z, r5.z, r2.y
					  mad r2.x, r2.x, r0.z, r0.x
					  lt r2.yzw, r0.zzzz, l(0.000000, 0.166667, 0.500000, 0.666667)
					  add r0.z, -r0.z, l(0.666667)
					  mul r0.z, r0.z, r1.w
					  mad r0.z, r0.z, l(6.000000), r0.x
					  movc r0.x, r2.w, r0.z, r0.x
					  movc r0.x, r2.z, r0.y, r0.x
					  movc r3.z, r2.y, r2.x, r0.x
					endif 
					mul r0.xyz, r3.xyzx, cb0[0].xxxx
					mad o0.xyz, r1.xyzx, r0.wwww, r0.xyzx
					mov o1.xyzw, l(0,0,0,0)
					mov o2.xyzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}