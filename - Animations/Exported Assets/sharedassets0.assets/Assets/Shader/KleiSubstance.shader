Shader "Klei/Substance" {
	Properties {
		_MainTex ("Base ColourMap", 2D) = "white" {}
		_ShineMask ("Shine Mask", 2D) = "white" {}
		_NormalNoise ("Normal Noise", 2D) = "white" {}
		_WorldUVScale ("World UV Scale", Range(0, 100)) = 5
		_Frequency ("Frequency", Float) = 1
		_ShineColour ("Shine Colour", Vector) = (1,1,1,1)
		_ColourTint ("Colour Tint", Vector) = (1,1,1,1)
		_SrcAlpha ("SrcAlpha", Float) = 0
		_DestAlpha ("DstAlpha", Float) = 0
		_ZWrite ("ZWrite", Float) = 0
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend Zero Zero, Zero Zero
			ZWrite Off
			Cull Off
			Stencil {
				Ref 1
				Comp Always
				Pass Replace
				Fail Keep
				ZFail Keep
			}
			GpuProgramID 47376
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "OPAQUE" "MATTE" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					// TEXCOORD                 3     zw        2     NONE   float     zw
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					// TEXCOORD                 5   xyz         4     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[9], immediateIndexed
					dcl_constantbuffer CB1[6], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyzw
					dcl_output o2.xy
					dcl_output o2.zw
					dcl_output o3.xyz
					dcl_output o4.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					add r1.xyzw, r0.xyzw, cb2[3].xyzw
					mul r2.xyzw, r1.yyyy, cb3[18].xyzw
					mad r2.xyzw, cb3[17].xyzw, r1.xxxx, r2.xyzw
					mad r2.xyzw, cb3[19].xyzw, r1.zzzz, r2.xyzw
					mad r1.xyzw, cb3[20].xyzw, r1.wwww, r2.xyzw
					mov o0.xyzw, r1.xyzw
					div o1.xy, r0.xyxx, cb0[8].yyyy
					mov o1.zw, v1.xxxy
					mul o2.xy, r0.xyxx, cb0[4].zwzz
					mov o3.xyz, r0.xyzx
					mad r0.x, cb1[4].x, l(2.000000), cb1[4].y
					mul r0.x, r0.x, l(0.100000)
					sincos null, o2.z, r0.x
					sincos o2.w, null, r0.x
					mul r0.x, r1.y, cb1[5].x
					mul r0.w, r0.x, l(0.500000)
					mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
					mov o4.z, r1.z
					add o4.xy, r0.zzzz, r0.xwxx
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "OPAQUE" "SHINY" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					// TEXCOORD                 3     zw        2     NONE   float     zw
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					// TEXCOORD                 5   xyz         4     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[9], immediateIndexed
					dcl_constantbuffer CB1[6], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyzw
					dcl_output o2.xy
					dcl_output o2.zw
					dcl_output o3.xyz
					dcl_output o4.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					add r1.xyzw, r0.xyzw, cb2[3].xyzw
					mul r2.xyzw, r1.yyyy, cb3[18].xyzw
					mad r2.xyzw, cb3[17].xyzw, r1.xxxx, r2.xyzw
					mad r2.xyzw, cb3[19].xyzw, r1.zzzz, r2.xyzw
					mad r1.xyzw, cb3[20].xyzw, r1.wwww, r2.xyzw
					mov o0.xyzw, r1.xyzw
					div o1.xy, r0.xyxx, cb0[8].yyyy
					mov o1.zw, v1.xxxy
					mul o2.xy, r0.xyxx, cb0[4].zwzz
					mov o3.xyz, r0.xyzx
					mad r0.x, cb1[4].x, l(2.000000), cb1[4].y
					mul r0.x, r0.x, l(0.100000)
					sincos null, o2.z, r0.x
					sincos o2.w, null, r0.x
					mul r0.x, r1.y, cb1[5].x
					mul r0.w, r0.x, l(0.500000)
					mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
					mov o4.z, r1.z
					add o4.xy, r0.zzzz, r0.xwxx
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ALPHA" "MATTE" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					// TEXCOORD                 3     zw        2     NONE   float     zw
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					// TEXCOORD                 5   xyz         4     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[9], immediateIndexed
					dcl_constantbuffer CB1[6], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyzw
					dcl_output o2.xy
					dcl_output o2.zw
					dcl_output o3.xyz
					dcl_output o4.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					add r1.xyzw, r0.xyzw, cb2[3].xyzw
					mul r2.xyzw, r1.yyyy, cb3[18].xyzw
					mad r2.xyzw, cb3[17].xyzw, r1.xxxx, r2.xyzw
					mad r2.xyzw, cb3[19].xyzw, r1.zzzz, r2.xyzw
					mad r1.xyzw, cb3[20].xyzw, r1.wwww, r2.xyzw
					mov o0.xyzw, r1.xyzw
					div o1.xy, r0.xyxx, cb0[8].yyyy
					mov o1.zw, v1.xxxy
					mul o2.xy, r0.xyxx, cb0[4].zwzz
					mov o3.xyz, r0.xyzx
					mad r0.x, cb1[4].x, l(2.000000), cb1[4].y
					mul r0.x, r0.x, l(0.100000)
					sincos null, o2.z, r0.x
					sincos o2.w, null, r0.x
					mul r0.x, r1.y, cb1[5].x
					mul r0.w, r0.x, l(0.500000)
					mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
					mov o4.z, r1.z
					add o4.xy, r0.zzzz, r0.xwxx
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ALPHA" "SHINY" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					// TEXCOORD                 3     zw        2     NONE   float     zw
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					// TEXCOORD                 5   xyz         4     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[9], immediateIndexed
					dcl_constantbuffer CB1[6], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyzw
					dcl_output o2.xy
					dcl_output o2.zw
					dcl_output o3.xyz
					dcl_output o4.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					add r1.xyzw, r0.xyzw, cb2[3].xyzw
					mul r2.xyzw, r1.yyyy, cb3[18].xyzw
					mad r2.xyzw, cb3[17].xyzw, r1.xxxx, r2.xyzw
					mad r2.xyzw, cb3[19].xyzw, r1.zzzz, r2.xyzw
					mad r1.xyzw, cb3[20].xyzw, r1.wwww, r2.xyzw
					mov o0.xyzw, r1.xyzw
					div o1.xy, r0.xyxx, cb0[8].yyyy
					mov o1.zw, v1.xxxy
					mul o2.xy, r0.xyxx, cb0[4].zwzz
					mov o3.xyz, r0.xyzx
					mad r0.x, cb1[4].x, l(2.000000), cb1[4].y
					mul r0.x, r0.x, l(0.100000)
					sincos null, o2.z, r0.x
					sincos o2.w, null, r0.x
					mul r0.x, r1.y, cb1[5].x
					mul r0.w, r0.x, l(0.500000)
					mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
					mov o4.z, r1.z
					add o4.xy, r0.zzzz, r0.xwxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "OPAQUE" "MATTE" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					// TEXCOORD                 3     zw        2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xy  
					// TEXCOORD                 5   xyz         4     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[15], immediateIndexed
					dcl_constantbuffer CB1[1], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_sampler s5, mode_default
					dcl_sampler s6, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_resource_texture2d (float,float,float,float) t6
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v2.xy
					dcl_input_ps linear v3.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 5
					sample r0.xyzw, v1.xyxx, t0.xyzw, s3
					mul r0.xyz, r0.xyzx, cb0[14].xyzx
					sample r1.xyzw, v2.xyxx, t1.xyzw, s1
					sample r2.xyzw, v2.xyxx, t2.xyzw, s2
					mul r0.w, r2.x, cb0[7].y
					mad r0.w, r0.w, cb0[11].z, cb0[11].x
					mul r0.xyz, r0.wwww, r0.xyzx
					sample r2.xyzw, v2.xyxx, t3.xyzw, s5
					mul r1.xz, cb0[6].yyzy, cb1[0].yyyy
					mad r1.xz, v3.xxyx, cb0[6].xxxx, r1.xxzx
					sample r3.xyzw, r1.xzxx, t4.xyzw, s0
					add_sat r0.w, r2.w, l(-0.500000)
					dp2 r0.w, r0.wwww, r3.wwww
					add r1.x, -r0.w, l(1.000000)
					mul r2.xyz, r3.xyzx, cb0[9].xyzx
					mul r2.xyz, r0.wwww, r2.xyzx
					mad r0.xyz, r0.xyzx, r1.xxxx, r2.xyzx
					mul r1.xz, v3.xxyx, cb0[10].wwww
					sample r2.xyzw, r1.xzxx, t5.xyzw, s6
					mul r0.w, r1.y, r2.w
					add r1.xyz, -r0.xyzx, cb0[10].xyzx
					mad r0.xyz, r0.wwww, r1.xyzx, r0.xyzx
					sample r1.xyzw, v2.xyxx, t6.xyzw, s4
					min r0.w, r1.y, r1.x
					min r0.w, r1.z, r0.w
					max r1.w, r1.y, r1.x
					max r1.w, r1.z, r1.w
					add r2.x, -r0.w, r1.w
					eq r2.y, r2.x, l(0.000000)
					if_nz r2.y
					  mov r2.yz, l(0,0,0,0)
					else 
					  add r2.w, r0.w, r1.w
					  lt r3.x, r2.w, l(1.000000)
					  div r2.w, r2.x, r2.w
					  add r0.w, -r0.w, -r1.w
					  add r0.w, r0.w, l(2.000000)
					  div r0.w, r2.x, r0.w
					  movc r2.z, r3.x, r2.w, r0.w
					  add r3.xyz, -r1.yzxy, r1.wwww
					  mul r0.w, r2.x, l(0.500000)
					  mad r3.xyz, r3.xyzx, l(0.166667, 0.166667, 0.166667, 0.000000), r0.wwww
					  div r3.xyz, r3.xyzx, r2.xxxx
					  add r0.w, -r3.x, r3.y
					  eq r1.xy, r1.wwww, r1.xyxx
					  add r1.zw, r3.zzzx, l(0.000000, 0.000000, 0.333333, 0.666667)
					  add r1.zw, -r3.yyyz, r1.zzzw
					  movc r1.y, r1.y, r1.z, r1.w
					  movc r0.w, r1.x, r0.w, r1.y
					  lt r1.x, r0.w, l(0.000000)
					  lt r1.y, l(1.000000), r0.w
					  add r1.zw, r0.wwww, l(0.000000, 0.000000, 1.000000, -1.000000)
					  movc r0.w, r1.y, r1.w, r0.w
					  movc r2.y, r1.x, r1.z, r0.w
					endif 
					min r0.w, r0.y, r0.x
					min r0.w, r0.z, r0.w
					max r1.x, r0.y, r0.x
					max r1.x, r0.z, r1.x
					add r0.w, r0.w, r1.x
					mul r1.xyz, r0.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)
					eq r1.w, r2.z, l(0.000000)
					if_z r1.w
					  lt r1.w, r0.w, l(1.000000)
					  add r2.x, r2.z, l(1.000000)
					  mul r2.x, r1.z, r2.x
					  mad r2.w, r0.w, l(0.500000), r2.z
					  mad r2.z, -r2.z, r1.z, r2.w
					  movc r1.w, r1.w, r2.x, r2.z
					  add r0.w, r0.w, -r1.w
					  add r3.xyzw, r2.yyyy, l(0.333333, 1.333333, -0.666667, 1.000000)
					  lt r2.x, r3.x, l(0.000000)
					  lt r2.z, l(1.000000), r3.x
					  movc r2.z, r2.z, r3.z, r3.x
					  movc r2.x, r2.x, r3.y, r2.z
					  add r2.z, -r0.w, r1.w
					  mul r2.w, r2.z, l(6.000000)
					  mad r3.x, r2.w, r2.x, r0.w
					  lt r4.xyz, r2.xxxx, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.x, -r2.x, l(0.666667)
					  mul r2.x, r2.x, r2.z
					  mad r2.x, r2.x, l(6.000000), r0.w
					  movc r2.x, r4.z, r2.x, r0.w
					  movc r2.x, r4.y, r1.w, r2.x
					  movc r1.x, r4.x, r3.x, r2.x
					  lt r2.x, r2.y, l(0.000000)
					  lt r3.x, l(1.000000), r2.y
					  add r4.xyzw, r2.yyyy, l(-1.000000, -0.333333, 0.666667, -1.333333)
					  movc r2.y, r3.x, r4.x, r2.y
					  movc r2.x, r2.x, r3.w, r2.y
					  mad r2.y, r2.w, r2.x, r0.w
					  lt r3.xyz, r2.xxxx, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.x, -r2.x, l(0.666667)
					  mul r2.x, r2.x, r2.z
					  mad r2.x, r2.x, l(6.000000), r0.w
					  movc r2.x, r3.z, r2.x, r0.w
					  movc r2.x, r3.y, r1.w, r2.x
					  movc r1.y, r3.x, r2.y, r2.x
					  lt r2.x, r4.y, l(0.000000)
					  lt r2.y, l(1.000000), r4.y
					  movc r2.y, r2.y, r4.w, r4.y
					  movc r2.x, r2.x, r4.z, r2.y
					  mad r2.y, r2.w, r2.x, r0.w
					  lt r3.xyz, r2.xxxx, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.x, -r2.x, l(0.666667)
					  mul r2.x, r2.x, r2.z
					  mad r2.x, r2.x, l(6.000000), r0.w
					  movc r0.w, r3.z, r2.x, r0.w
					  movc r0.w, r3.y, r1.w, r0.w
					  movc r1.z, r3.x, r2.y, r0.w
					endif 
					add r0.w, -cb0[8].z, l(1.000000)
					mul r0.xyz, r0.xyzx, r0.wwww
					mad o0.xyz, r1.xyzx, cb0[8].zzzz, r0.xyzx
					mov o0.w, l(1.000000)
					mov o1.xyzw, l(0,0,0,1.000000)
					mov o2.xyzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "OPAQUE" "SHINY" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					// TEXCOORD                 3     zw        2     NONE   float     zw
					// TEXCOORD                 2   xyz         3     NONE   float   xy  
					// TEXCOORD                 5   xyz         4     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[16], immediateIndexed
					dcl_constantbuffer CB1[5], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_sampler s5, mode_default
					dcl_sampler s6, mode_default
					dcl_sampler s7, mode_default
					dcl_sampler s8, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_resource_texture2d (float,float,float,float) t6
					dcl_resource_texture2d (float,float,float,float) t7
					dcl_resource_texture2d (float,float,float,float) t8
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v2.xy
					dcl_input_ps linear v2.zw
					dcl_input_ps linear v3.xy
					dcl_input_ps linear v4.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 5
					sample r0.xyzw, v1.xyxx, t0.xyzw, s3
					mul r0.xyz, r0.xyzx, cb0[14].xyzx
					sample r1.xyzw, v2.xyxx, t1.xyzw, s1
					sample r2.xyzw, v2.xyxx, t2.xyzw, s2
					mul r0.w, r2.x, cb0[7].y
					mad r0.w, r0.w, cb0[11].z, cb0[11].x
					mul r0.xyz, r0.wwww, r0.xyzx
					sample r2.xyzw, v2.xyxx, t3.xyzw, s7
					mul r1.xz, cb0[6].yyzy, cb1[0].yyyy
					mad r1.xz, v3.xxyx, cb0[6].xxxx, r1.xxzx
					sample r3.xyzw, r1.xzxx, t4.xyzw, s0
					add_sat r0.w, r2.w, l(-0.500000)
					dp2 r0.w, r0.wwww, r3.wwww
					add r1.x, -r0.w, l(1.000000)
					mul r2.xyz, r3.xyzx, cb0[9].xyzx
					mul r2.xyz, r0.wwww, r2.xyzx
					mad r0.xyz, r0.xyzx, r1.xxxx, r2.xyzx
					mul r1.xz, v3.xxyx, cb0[10].wwww
					sample r2.xyzw, r1.xzxx, t5.xyzw, s8
					mul r0.w, r1.y, r2.w
					add r1.xyz, -r0.xyzx, cb0[10].xyzx
					mad r0.xyz, r0.wwww, r1.xyzx, r0.xyzx
					mad r1.xy, cb0[12].wwww, cb0[3].xxxx, cb1[4].xyxx
					mul r1.xy, r1.xyxx, cb0[15].zwzz
					mad r1.xy, v1.xyxx, cb0[15].xyxx, r1.xyxx
					sample r1.xyzw, r1.xyxx, t6.xyzw, s6
					mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r1.zw, v4.xxxy, cb0[8].wwww
					sincos r1.zw, null, r1.zzzw
					mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
					dp2 r2.x, v2.zwzz, r1.zwzz
					mul r2.zw, v2.wwwz, l(0.000000, 0.000000, -1.000000, 1.000000)
					dp2 r2.y, r2.zwzz, r1.zwzz
					dp2_sat r0.w, r2.xyxx, r1.xyxx
					sample r1.xyzw, v1.xyxx, t7.xyzw, s4
					mul r0.w, r0.w, r1.w
					mul r0.w, r0.w, cb0[13].w
					mad r0.xyz, cb0[13].xyzx, r0.wwww, r0.xyzx
					sample r1.xyzw, v2.xyxx, t8.xyzw, s5
					min r0.w, r1.y, r1.x
					min r0.w, r1.z, r0.w
					max r1.w, r1.y, r1.x
					max r1.w, r1.z, r1.w
					add r2.x, -r0.w, r1.w
					eq r2.y, r2.x, l(0.000000)
					if_nz r2.y
					  mov r2.yz, l(0,0,0,0)
					else 
					  add r2.w, r0.w, r1.w
					  lt r3.x, r2.w, l(1.000000)
					  div r2.w, r2.x, r2.w
					  add r0.w, -r0.w, -r1.w
					  add r0.w, r0.w, l(2.000000)
					  div r0.w, r2.x, r0.w
					  movc r2.z, r3.x, r2.w, r0.w
					  add r3.xyz, -r1.yzxy, r1.wwww
					  mul r0.w, r2.x, l(0.500000)
					  mad r3.xyz, r3.xyzx, l(0.166667, 0.166667, 0.166667, 0.000000), r0.wwww
					  div r3.xyz, r3.xyzx, r2.xxxx
					  add r0.w, -r3.x, r3.y
					  eq r1.xy, r1.wwww, r1.xyxx
					  add r1.zw, r3.zzzx, l(0.000000, 0.000000, 0.333333, 0.666667)
					  add r1.zw, -r3.yyyz, r1.zzzw
					  movc r1.y, r1.y, r1.z, r1.w
					  movc r0.w, r1.x, r0.w, r1.y
					  lt r1.x, r0.w, l(0.000000)
					  lt r1.y, l(1.000000), r0.w
					  add r1.zw, r0.wwww, l(0.000000, 0.000000, 1.000000, -1.000000)
					  movc r0.w, r1.y, r1.w, r0.w
					  movc r2.y, r1.x, r1.z, r0.w
					endif 
					min r0.w, r0.y, r0.x
					min r0.w, r0.z, r0.w
					max r1.x, r0.y, r0.x
					max r1.x, r0.z, r1.x
					add r0.w, r0.w, r1.x
					mul r1.xyz, r0.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)
					eq r1.w, r2.z, l(0.000000)
					if_z r1.w
					  lt r1.w, r0.w, l(1.000000)
					  add r2.x, r2.z, l(1.000000)
					  mul r2.x, r1.z, r2.x
					  mad r2.w, r0.w, l(0.500000), r2.z
					  mad r2.z, -r2.z, r1.z, r2.w
					  movc r1.w, r1.w, r2.x, r2.z
					  add r0.w, r0.w, -r1.w
					  add r3.xyzw, r2.yyyy, l(0.333333, 1.333333, -0.666667, 1.000000)
					  lt r2.x, r3.x, l(0.000000)
					  lt r2.z, l(1.000000), r3.x
					  movc r2.z, r2.z, r3.z, r3.x
					  movc r2.x, r2.x, r3.y, r2.z
					  add r2.z, -r0.w, r1.w
					  mul r2.w, r2.z, l(6.000000)
					  mad r3.x, r2.w, r2.x, r0.w
					  lt r4.xyz, r2.xxxx, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.x, -r2.x, l(0.666667)
					  mul r2.x, r2.x, r2.z
					  mad r2.x, r2.x, l(6.000000), r0.w
					  movc r2.x, r4.z, r2.x, r0.w
					  movc r2.x, r4.y, r1.w, r2.x
					  movc r1.x, r4.x, r3.x, r2.x
					  lt r2.x, r2.y, l(0.000000)
					  lt r3.x, l(1.000000), r2.y
					  add r4.xyzw, r2.yyyy, l(-1.000000, -0.333333, 0.666667, -1.333333)
					  movc r2.y, r3.x, r4.x, r2.y
					  movc r2.x, r2.x, r3.w, r2.y
					  mad r2.y, r2.w, r2.x, r0.w
					  lt r3.xyz, r2.xxxx, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.x, -r2.x, l(0.666667)
					  mul r2.x, r2.x, r2.z
					  mad r2.x, r2.x, l(6.000000), r0.w
					  movc r2.x, r3.z, r2.x, r0.w
					  movc r2.x, r3.y, r1.w, r2.x
					  movc r1.y, r3.x, r2.y, r2.x
					  lt r2.x, r4.y, l(0.000000)
					  lt r2.y, l(1.000000), r4.y
					  movc r2.y, r2.y, r4.w, r4.y
					  movc r2.x, r2.x, r4.z, r2.y
					  mad r2.y, r2.w, r2.x, r0.w
					  lt r3.xyz, r2.xxxx, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.x, -r2.x, l(0.666667)
					  mul r2.x, r2.x, r2.z
					  mad r2.x, r2.x, l(6.000000), r0.w
					  movc r0.w, r3.z, r2.x, r0.w
					  movc r0.w, r3.y, r1.w, r0.w
					  movc r1.z, r3.x, r2.y, r0.w
					endif 
					add r0.w, -cb0[8].z, l(1.000000)
					mul r0.xyz, r0.xyzx, r0.wwww
					mad o0.xyz, r1.xyzx, cb0[8].zzzz, r0.xyzx
					mov o0.w, l(1.000000)
					mov o1.xyzw, l(0,0,0,1.000000)
					mov o2.xyzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ALPHA" "MATTE" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					// TEXCOORD                 3     zw        2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xy  
					// TEXCOORD                 5   xyz         4     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[15], immediateIndexed
					dcl_constantbuffer CB1[1], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_sampler s5, mode_default
					dcl_sampler s6, mode_default
					dcl_sampler s7, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_resource_texture2d (float,float,float,float) t6
					dcl_resource_texture2d (float,float,float,float) t7
					dcl_input_ps linear v1.xyzw
					dcl_input_ps linear v2.xy
					dcl_input_ps linear v3.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 5
					sample r0.xyzw, v1.zwzz, t0.xyzw, s5
					ge r1.x, l(0.250000), r0.w
					discard_nz r1.x
					sample r1.xyzw, v1.xyxx, t1.xyzw, s3
					mul r0.xyz, r0.xyzx, r1.xyzx
					mul r0.xyz, r0.xyzx, cb0[14].xyzx
					sample r1.xyzw, v2.xyxx, t2.xyzw, s1
					sample r2.xyzw, v2.xyxx, t3.xyzw, s2
					mul r1.z, r2.x, cb0[7].y
					add r1.x, -r1.x, l(1.000000)
					mul r1.x, r1.x, cb0[11].y
					log r1.x, r1.x
					mul r1.x, r1.x, cb0[11].w
					exp r1.x, r1.x
					add r1.x, r1.x, cb0[11].x
					mad r1.x, r1.z, cb0[11].z, r1.x
					mul r0.xyz, r0.xyzx, r1.xxxx
					sample r2.xyzw, v2.xyxx, t4.xyzw, s6
					mul r1.xz, cb0[6].yyzy, cb1[0].yyyy
					mad r1.xz, v3.xxyx, cb0[6].xxxx, r1.xxzx
					sample r3.xyzw, r1.xzxx, t5.xyzw, s0
					add_sat r1.x, r2.w, l(-0.500000)
					dp2 r1.x, r1.xxxx, r3.wwww
					add r1.z, -r1.x, l(1.000000)
					mul r2.xyz, r3.xyzx, cb0[9].xyzx
					mul r2.xyz, r1.xxxx, r2.xyzx
					mad r0.xyz, r0.xyzx, r1.zzzz, r2.xyzx
					mul r1.xz, v3.xxyx, cb0[10].wwww
					sample r2.xyzw, r1.xzxx, t6.xyzw, s7
					mul r1.x, r1.y, r2.w
					add r1.yzw, -r0.xxyz, cb0[10].xxyz
					mad r0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
					sample r1.xyzw, v2.xyxx, t7.xyzw, s4
					min r1.w, r1.y, r1.x
					min r1.w, r1.z, r1.w
					max r2.x, r1.y, r1.x
					max r2.x, r1.z, r2.x
					add r2.y, -r1.w, r2.x
					eq r2.z, r2.y, l(0.000000)
					if_nz r2.z
					  mov r2.zw, l(0,0,0,0)
					else 
					  add r3.x, r1.w, r2.x
					  lt r3.y, r3.x, l(1.000000)
					  div r3.x, r2.y, r3.x
					  add r1.w, -r1.w, -r2.x
					  add r1.w, r1.w, l(2.000000)
					  div r1.w, r2.y, r1.w
					  movc r2.w, r3.y, r3.x, r1.w
					  add r3.xyz, -r1.yzxy, r2.xxxx
					  mul r1.z, r2.y, l(0.500000)
					  mad r3.xyz, r3.xyzx, l(0.166667, 0.166667, 0.166667, 0.000000), r1.zzzz
					  div r3.xyz, r3.xyzx, r2.yyyy
					  add r1.z, -r3.x, r3.y
					  eq r1.xy, r1.xyxx, r2.xxxx
					  add r2.xy, r3.zxzz, l(0.333333, 0.666667, 0.000000, 0.000000)
					  add r2.xy, -r3.yzyy, r2.xyxx
					  movc r1.y, r1.y, r2.x, r2.y
					  movc r1.x, r1.x, r1.z, r1.y
					  lt r1.y, r1.x, l(0.000000)
					  lt r1.z, l(1.000000), r1.x
					  add r2.xy, r1.xxxx, l(1.000000, -1.000000, 0.000000, 0.000000)
					  movc r1.x, r1.z, r2.y, r1.x
					  movc r2.z, r1.y, r2.x, r1.x
					endif 
					min r1.x, r0.y, r0.x
					min r1.x, r0.z, r1.x
					max r1.y, r0.y, r0.x
					max r1.y, r0.z, r1.y
					add r1.x, r1.x, r1.y
					mul r1.yzw, r1.xxxx, l(0.000000, 0.500000, 0.500000, 0.500000)
					eq r2.x, r2.w, l(0.000000)
					if_z r2.x
					  lt r2.x, r1.x, l(1.000000)
					  add r2.y, r2.w, l(1.000000)
					  mul r2.y, r1.w, r2.y
					  mad r3.x, r1.x, l(0.500000), r2.w
					  mad r2.w, -r2.w, r1.w, r3.x
					  movc r2.x, r2.x, r2.y, r2.w
					  add r1.x, r1.x, -r2.x
					  add r3.xyzw, r2.zzzz, l(0.333333, 1.333333, -0.666667, 1.000000)
					  lt r2.y, r3.x, l(0.000000)
					  lt r2.w, l(1.000000), r3.x
					  movc r2.w, r2.w, r3.z, r3.x
					  movc r2.y, r2.y, r3.y, r2.w
					  add r2.w, -r1.x, r2.x
					  mul r3.x, r2.w, l(6.000000)
					  mad r3.y, r3.x, r2.y, r1.x
					  lt r4.xyz, r2.yyyy, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.y, -r2.y, l(0.666667)
					  mul r2.y, r2.y, r2.w
					  mad r2.y, r2.y, l(6.000000), r1.x
					  movc r2.y, r4.z, r2.y, r1.x
					  movc r2.y, r4.y, r2.x, r2.y
					  movc r1.y, r4.x, r3.y, r2.y
					  lt r2.y, r2.z, l(0.000000)
					  lt r3.y, l(1.000000), r2.z
					  add r4.xyzw, r2.zzzz, l(-1.000000, -0.333333, 0.666667, -1.333333)
					  movc r2.z, r3.y, r4.x, r2.z
					  movc r2.y, r2.y, r3.w, r2.z
					  mad r2.z, r3.x, r2.y, r1.x
					  lt r3.yzw, r2.yyyy, l(0.000000, 0.166667, 0.500000, 0.666667)
					  add r2.y, -r2.y, l(0.666667)
					  mul r2.y, r2.y, r2.w
					  mad r2.y, r2.y, l(6.000000), r1.x
					  movc r2.y, r3.w, r2.y, r1.x
					  movc r2.y, r3.z, r2.x, r2.y
					  movc r1.z, r3.y, r2.z, r2.y
					  lt r2.y, r4.y, l(0.000000)
					  lt r2.z, l(1.000000), r4.y
					  movc r2.z, r2.z, r4.w, r4.y
					  movc r2.y, r2.y, r4.z, r2.z
					  mad r2.z, r3.x, r2.y, r1.x
					  lt r3.xyz, r2.yyyy, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.y, -r2.y, l(0.666667)
					  mul r2.y, r2.y, r2.w
					  mad r2.y, r2.y, l(6.000000), r1.x
					  movc r1.x, r3.z, r2.y, r1.x
					  movc r1.x, r3.y, r2.x, r1.x
					  movc r1.w, r3.x, r2.z, r1.x
					endif 
					add r1.x, -cb0[8].z, l(1.000000)
					mul r0.xyz, r0.xyzx, r1.xxxx
					mad o0.xyz, r1.yzwy, cb0[8].zzzz, r0.xyzx
					mov o0.w, r0.w
					mov o1.xyz, l(0,0,0,0)
					mov o1.w, r0.w
					mov o2.xyzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ALPHA" "SHINY" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
					// TEXCOORD                 1   xy          2     NONE   float   xy  
					// TEXCOORD                 3     zw        2     NONE   float     zw
					// TEXCOORD                 2   xyz         3     NONE   float   xy  
					// TEXCOORD                 5   xyz         4     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[16], immediateIndexed
					dcl_constantbuffer CB1[5], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_sampler s5, mode_default
					dcl_sampler s6, mode_default
					dcl_sampler s7, mode_default
					dcl_sampler s8, mode_default
					dcl_sampler s9, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_resource_texture2d (float,float,float,float) t6
					dcl_resource_texture2d (float,float,float,float) t7
					dcl_resource_texture2d (float,float,float,float) t8
					dcl_resource_texture2d (float,float,float,float) t9
					dcl_input_ps linear v1.xyzw
					dcl_input_ps linear v2.xy
					dcl_input_ps linear v2.zw
					dcl_input_ps linear v3.xy
					dcl_input_ps linear v4.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 5
					sample r0.xyzw, v1.zwzz, t0.xyzw, s6
					ge r1.x, l(0.250000), r0.w
					discard_nz r1.x
					sample r1.xyzw, v1.xyxx, t1.xyzw, s3
					mul r0.xyz, r0.xyzx, r1.xyzx
					mul r0.xyz, r0.xyzx, cb0[14].xyzx
					sample r1.xyzw, v2.xyxx, t2.xyzw, s1
					sample r2.xyzw, v2.xyxx, t3.xyzw, s2
					mul r1.z, r2.x, cb0[7].y
					add r1.x, -r1.x, l(1.000000)
					mul r1.x, r1.x, cb0[11].y
					log r1.x, r1.x
					mul r1.x, r1.x, cb0[11].w
					exp r1.x, r1.x
					add r1.x, r1.x, cb0[11].x
					mad r1.x, r1.z, cb0[11].z, r1.x
					mul r0.xyz, r0.xyzx, r1.xxxx
					sample r2.xyzw, v2.xyxx, t4.xyzw, s8
					mul r1.xz, cb0[6].yyzy, cb1[0].yyyy
					mad r1.xz, v3.xxyx, cb0[6].xxxx, r1.xxzx
					sample r3.xyzw, r1.xzxx, t5.xyzw, s0
					add_sat r1.x, r2.w, l(-0.500000)
					dp2 r1.x, r1.xxxx, r3.wwww
					add r1.z, -r1.x, l(1.000000)
					mul r2.xyz, r3.xyzx, cb0[9].xyzx
					mul r2.xyz, r1.xxxx, r2.xyzx
					mad r0.xyz, r0.xyzx, r1.zzzz, r2.xyzx
					mul r1.xz, v3.xxyx, cb0[10].wwww
					sample r2.xyzw, r1.xzxx, t6.xyzw, s9
					mul r1.x, r1.y, r2.w
					add r1.yzw, -r0.xxyz, cb0[10].xxyz
					mad r0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
					mad r1.xy, cb0[12].wwww, cb0[3].xxxx, cb1[4].xyxx
					mul r1.xy, r1.xyxx, cb0[15].zwzz
					mad r1.xy, v1.xyxx, cb0[15].xyxx, r1.xyxx
					sample r1.xyzw, r1.xyxx, t7.xyzw, s7
					mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r1.zw, v4.xxxy, cb0[8].wwww
					sincos r1.zw, null, r1.zzzw
					mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
					dp2 r2.x, v2.zwzz, r1.zwzz
					mul r2.zw, v2.wwwz, l(0.000000, 0.000000, -1.000000, 1.000000)
					dp2 r2.y, r2.zwzz, r1.zwzz
					dp2_sat r1.x, r2.xyxx, r1.xyxx
					sample r2.xyzw, v1.xyxx, t8.xyzw, s4
					mul r1.x, r1.x, r2.w
					mul r1.x, r1.x, cb0[13].w
					mad r0.xyz, cb0[13].xyzx, r1.xxxx, r0.xyzx
					sample r1.xyzw, v2.xyxx, t9.xyzw, s5
					min r1.w, r1.y, r1.x
					min r1.w, r1.z, r1.w
					max r2.x, r1.y, r1.x
					max r2.x, r1.z, r2.x
					add r2.y, -r1.w, r2.x
					eq r2.z, r2.y, l(0.000000)
					if_nz r2.z
					  mov r2.zw, l(0,0,0,0)
					else 
					  add r3.x, r1.w, r2.x
					  lt r3.y, r3.x, l(1.000000)
					  div r3.x, r2.y, r3.x
					  add r1.w, -r1.w, -r2.x
					  add r1.w, r1.w, l(2.000000)
					  div r1.w, r2.y, r1.w
					  movc r2.w, r3.y, r3.x, r1.w
					  add r3.xyz, -r1.yzxy, r2.xxxx
					  mul r1.z, r2.y, l(0.500000)
					  mad r3.xyz, r3.xyzx, l(0.166667, 0.166667, 0.166667, 0.000000), r1.zzzz
					  div r3.xyz, r3.xyzx, r2.yyyy
					  add r1.z, -r3.x, r3.y
					  eq r1.xy, r1.xyxx, r2.xxxx
					  add r2.xy, r3.zxzz, l(0.333333, 0.666667, 0.000000, 0.000000)
					  add r2.xy, -r3.yzyy, r2.xyxx
					  movc r1.y, r1.y, r2.x, r2.y
					  movc r1.x, r1.x, r1.z, r1.y
					  lt r1.y, r1.x, l(0.000000)
					  lt r1.z, l(1.000000), r1.x
					  add r2.xy, r1.xxxx, l(1.000000, -1.000000, 0.000000, 0.000000)
					  movc r1.x, r1.z, r2.y, r1.x
					  movc r2.z, r1.y, r2.x, r1.x
					endif 
					min r1.x, r0.y, r0.x
					min r1.x, r0.z, r1.x
					max r1.y, r0.y, r0.x
					max r1.y, r0.z, r1.y
					add r1.x, r1.x, r1.y
					mul r1.yzw, r1.xxxx, l(0.000000, 0.500000, 0.500000, 0.500000)
					eq r2.x, r2.w, l(0.000000)
					if_z r2.x
					  lt r2.x, r1.x, l(1.000000)
					  add r2.y, r2.w, l(1.000000)
					  mul r2.y, r1.w, r2.y
					  mad r3.x, r1.x, l(0.500000), r2.w
					  mad r2.w, -r2.w, r1.w, r3.x
					  movc r2.x, r2.x, r2.y, r2.w
					  add r1.x, r1.x, -r2.x
					  add r3.xyzw, r2.zzzz, l(0.333333, 1.333333, -0.666667, 1.000000)
					  lt r2.y, r3.x, l(0.000000)
					  lt r2.w, l(1.000000), r3.x
					  movc r2.w, r2.w, r3.z, r3.x
					  movc r2.y, r2.y, r3.y, r2.w
					  add r2.w, -r1.x, r2.x
					  mul r3.x, r2.w, l(6.000000)
					  mad r3.y, r3.x, r2.y, r1.x
					  lt r4.xyz, r2.yyyy, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.y, -r2.y, l(0.666667)
					  mul r2.y, r2.y, r2.w
					  mad r2.y, r2.y, l(6.000000), r1.x
					  movc r2.y, r4.z, r2.y, r1.x
					  movc r2.y, r4.y, r2.x, r2.y
					  movc r1.y, r4.x, r3.y, r2.y
					  lt r2.y, r2.z, l(0.000000)
					  lt r3.y, l(1.000000), r2.z
					  add r4.xyzw, r2.zzzz, l(-1.000000, -0.333333, 0.666667, -1.333333)
					  movc r2.z, r3.y, r4.x, r2.z
					  movc r2.y, r2.y, r3.w, r2.z
					  mad r2.z, r3.x, r2.y, r1.x
					  lt r3.yzw, r2.yyyy, l(0.000000, 0.166667, 0.500000, 0.666667)
					  add r2.y, -r2.y, l(0.666667)
					  mul r2.y, r2.y, r2.w
					  mad r2.y, r2.y, l(6.000000), r1.x
					  movc r2.y, r3.w, r2.y, r1.x
					  movc r2.y, r3.z, r2.x, r2.y
					  movc r1.z, r3.y, r2.z, r2.y
					  lt r2.y, r4.y, l(0.000000)
					  lt r2.z, l(1.000000), r4.y
					  movc r2.z, r2.z, r4.w, r4.y
					  movc r2.y, r2.y, r4.z, r2.z
					  mad r2.z, r3.x, r2.y, r1.x
					  lt r3.xyz, r2.yyyy, l(0.166667, 0.500000, 0.666667, 0.000000)
					  add r2.y, -r2.y, l(0.666667)
					  mul r2.y, r2.y, r2.w
					  mad r2.y, r2.y, l(6.000000), r1.x
					  movc r1.x, r3.z, r2.y, r1.x
					  movc r1.x, r3.y, r2.x, r1.x
					  movc r1.w, r3.x, r2.z, r1.x
					endif 
					add r1.x, -cb0[8].z, l(1.000000)
					mul r0.xyz, r0.xyzx, r1.xxxx
					mad o0.xyz, r1.yzwy, cb0[8].zzzz, r0.xyzx
					mov o0.w, r0.w
					mov o1.xyz, l(0,0,0,0)
					mov o1.w, r0.w
					mov o2.xyzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}